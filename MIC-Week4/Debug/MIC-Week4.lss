
MIC-Week4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000021c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002a0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b1c  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000021b  00000000  00000000  00000e58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000602  00000000  00000000  00001073  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a4  00000000  00000000  00001678  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000214  00000000  00000000  0000171c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004ab  00000000  00000000  00001930  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000130  00000000  00000000  00001ddb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a0 30       	cpi	r26, 0x00	; 0
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	a5 d0       	rcall	.+330    	; 0x1f4 <main>
  aa:	b6 c0       	rjmp	.+364    	; 0x218 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <wait>:
}

// Set pulse width for Blue on pin PB5, 0=off, 255=max
void setBlue( unsigned char blue )
{
	OCR1C = blue;
  ae:	18 16       	cp	r1, r24
  b0:	19 06       	cpc	r1, r25
  b2:	6c f4       	brge	.+26     	; 0xce <wait+0x20>
  b4:	20 e0       	ldi	r18, 0x00	; 0
  b6:	30 e0       	ldi	r19, 0x00	; 0
  b8:	ef ec       	ldi	r30, 0xCF	; 207
  ba:	f7 e0       	ldi	r31, 0x07	; 7
  bc:	31 97       	sbiw	r30, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <wait+0xe>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <wait+0x14>
  c2:	00 00       	nop
  c4:	2f 5f       	subi	r18, 0xFF	; 255
  c6:	3f 4f       	sbci	r19, 0xFF	; 255
  c8:	28 17       	cp	r18, r24
  ca:	39 07       	cpc	r19, r25
  cc:	a9 f7       	brne	.-22     	; 0xb8 <wait+0xa>
  ce:	08 95       	ret

000000d0 <timer1Init>:
  d0:	1b bc       	out	0x2b, r1	; 43
  d2:	1a bc       	out	0x2a, r1	; 42
  d4:	19 bc       	out	0x29, r1	; 41
  d6:	18 bc       	out	0x28, r1	; 40
  d8:	10 92 79 00 	sts	0x0079, r1
  dc:	10 92 78 00 	sts	0x0078, r1
  e0:	89 ea       	ldi	r24, 0xA9	; 169
  e2:	8f bd       	out	0x2f, r24	; 47
  e4:	8b e0       	ldi	r24, 0x0B	; 11
  e6:	8e bd       	out	0x2e, r24	; 46
  e8:	08 95       	ret

000000ea <adcInit>:
// void setBlue( unsigned char blue)

// Initialize ADC:
void adcInit( void )
{
	ADMUX = 0b11100001;			// AREF=2,56 V, result left adjusted, channel1 at pin PF1
  ea:	81 ee       	ldi	r24, 0xE1	; 225
  ec:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0b10000110;		// ADC-enable, no interrupt, no free running, division by 64
  ee:	86 e8       	ldi	r24, 0x86	; 134
  f0:	86 b9       	out	0x06, r24	; 6
  f2:	08 95       	ret

000000f4 <alleKleuren>:
	}
}

int alleKleuren(void)
{
	DDRB = 0xFF;					// set PORTB for compare output
  f4:	8f ef       	ldi	r24, 0xFF	; 255
  f6:	87 bb       	out	0x17, r24	; 23
	timer1Init();
  f8:	eb df       	rcall	.-42     	; 0xd0 <timer1Init>
	wait(100);
  fa:	84 e6       	ldi	r24, 0x64	; 100
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	d7 df       	rcall	.-82     	; 0xae <wait>
}

// Set pulse width for Blue on pin PB5, 0=off, 255=max
void setBlue( unsigned char blue )
{
	OCR1C = blue;
 100:	0f 2e       	mov	r0, r31
 102:	f8 e7       	ldi	r31, 0x78	; 120
 104:	cf 2e       	mov	r12, r31
 106:	d1 2c       	mov	r13, r1
 108:	f0 2d       	mov	r31, r0
	timer1Init();
	wait(100);

	while (1)
	{
		int delta = 1;
 10a:	88 24       	eor	r8, r8
 10c:	83 94       	inc	r8
 10e:	91 2c       	mov	r9, r1
 110:	77 24       	eor	r7, r7
 112:	7a 94       	dec	r7
 114:	61 2c       	mov	r6, r1
}

// Set pulse width for RED on pin PB5, 0=off, 255=max
void setRed( unsigned char red )
{
	OCR1A = red;
 116:	1b bc       	out	0x2b, r1	; 43
 118:	1a bc       	out	0x2a, r1	; 42
}

// Set pulse width for Blue on pin PB5, 0=off, 255=max
void setBlue( unsigned char blue )
{
	OCR1C = blue;
 11a:	f6 01       	movw	r30, r12
 11c:	11 82       	std	Z+1, r1	; 0x01
 11e:	10 82       	st	Z, r1
}

// Set pulse width for Green on pin PB5, 0=off, 255=max
void setGreen( unsigned char green )
{
	OCR1B = green;
 120:	19 bc       	out	0x29, r1	; 41
 122:	18 bc       	out	0x28, r1	; 40
		int delta2 = 1;
		setRed (0);
		setBlue(0);
		setGreen(0);

	for (int red = 0; red<=255; red+=delta)
 124:	00 e0       	ldi	r16, 0x00	; 0
 126:	10 e0       	ldi	r17, 0x00	; 0
	timer1Init();
	wait(100);

	while (1)
	{
		int delta = 1;
 128:	c8 2d       	mov	r28, r8
 12a:	d9 2d       	mov	r29, r9
 12c:	c8 01       	movw	r24, r16
 12e:	99 27       	eor	r25, r25
}

// Set pulse width for RED on pin PB5, 0=off, 255=max
void setRed( unsigned char red )
{
	OCR1A = red;
 130:	9b bd       	out	0x2b, r25	; 43
 132:	8a bd       	out	0x2a, r24	; 42
		setGreen(0);

	for (int red = 0; red<=255; red+=delta)
	{
		setRed( red );				// 8-bits PWM on pin OCR1a
		delta += 2;					// progressive steps up
 134:	22 96       	adiw	r28, 0x02	; 2
		wait(100);					// delay of 100 ms (busy waiting)
 136:	84 e6       	ldi	r24, 0x64	; 100
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	b9 df       	rcall	.-142    	; 0xae <wait>
		int delta2 = 1;
		setRed (0);
		setBlue(0);
		setGreen(0);

	for (int red = 0; red<=255; red+=delta)
 13c:	0c 0f       	add	r16, r28
 13e:	1d 1f       	adc	r17, r29
 140:	0f 3f       	cpi	r16, 0xFF	; 255
 142:	11 05       	cpc	r17, r1
 144:	99 f3       	breq	.-26     	; 0x12c <alleKleuren+0x38>
 146:	94 f3       	brlt	.-28     	; 0x12c <alleKleuren+0x38>
 148:	e1 2c       	mov	r14, r1
 14a:	f1 2c       	mov	r15, r1
 14c:	08 2d       	mov	r16, r8
 14e:	19 2d       	mov	r17, r9
 150:	c7 01       	movw	r24, r14
 152:	99 27       	eor	r25, r25
}

// Set pulse width for Green on pin PB5, 0=off, 255=max
void setGreen( unsigned char green )
{
	OCR1B = green;
 154:	99 bd       	out	0x29, r25	; 41
 156:	88 bd       	out	0x28, r24	; 40
	}

	for (int green = 0; green<=255; green+=delta1)
	{
		setGreen( green );				// 8-bits PWM on pin OCR1a
		delta1 += 2;					// progressive steps up
 158:	0e 5f       	subi	r16, 0xFE	; 254
 15a:	1f 4f       	sbci	r17, 0xFF	; 255
		wait(100);					// delay of 100 ms (busy waiting)
 15c:	84 e6       	ldi	r24, 0x64	; 100
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	a6 df       	rcall	.-180    	; 0xae <wait>
		setRed( red );				// 8-bits PWM on pin OCR1a
		delta += 2;					// progressive steps up
		wait(100);					// delay of 100 ms (busy waiting)
	}

	for (int green = 0; green<=255; green+=delta1)
 162:	e0 0e       	add	r14, r16
 164:	f1 1e       	adc	r15, r17
 166:	ef ef       	ldi	r30, 0xFF	; 255
 168:	ee 16       	cp	r14, r30
 16a:	f1 04       	cpc	r15, r1
 16c:	89 f3       	breq	.-30     	; 0x150 <alleKleuren+0x5c>
 16e:	84 f3       	brlt	.-32     	; 0x150 <alleKleuren+0x5c>
 170:	a1 2c       	mov	r10, r1
 172:	b1 2c       	mov	r11, r1
 174:	e8 2c       	mov	r14, r8
 176:	f9 2c       	mov	r15, r9
 178:	c5 01       	movw	r24, r10
 17a:	99 27       	eor	r25, r25
}

// Set pulse width for Blue on pin PB5, 0=off, 255=max
void setBlue( unsigned char blue )
{
	OCR1C = blue;
 17c:	f6 01       	movw	r30, r12
 17e:	91 83       	std	Z+1, r25	; 0x01
 180:	80 83       	st	Z, r24
	}

	for (int blue = 0; blue<=255; blue+=delta2)
	{
		setBlue( blue );				// 8-bits PWM on pin OCR1a
		delta2 += 2;					// progressive steps up
 182:	f2 e0       	ldi	r31, 0x02	; 2
 184:	ef 0e       	add	r14, r31
 186:	f1 1c       	adc	r15, r1
		wait(100);					// delay of 100 ms (busy waiting)
 188:	84 e6       	ldi	r24, 0x64	; 100
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	90 df       	rcall	.-224    	; 0xae <wait>
		setGreen( green );				// 8-bits PWM on pin OCR1a
		delta1 += 2;					// progressive steps up
		wait(100);					// delay of 100 ms (busy waiting)
	}

	for (int blue = 0; blue<=255; blue+=delta2)
 18e:	ae 0c       	add	r10, r14
 190:	bf 1c       	adc	r11, r15
 192:	8f ef       	ldi	r24, 0xFF	; 255
 194:	a8 16       	cp	r10, r24
 196:	b1 04       	cpc	r11, r1
 198:	79 f3       	breq	.-34     	; 0x178 <alleKleuren+0x84>
 19a:	74 f3       	brlt	.-36     	; 0x178 <alleKleuren+0x84>
 19c:	a7 2c       	mov	r10, r7
 19e:	b6 2c       	mov	r11, r6
 1a0:	c5 01       	movw	r24, r10
 1a2:	99 27       	eor	r25, r25
}

// Set pulse width for RED on pin PB5, 0=off, 255=max
void setRed( unsigned char red )
{
	OCR1A = red;
 1a4:	9b bd       	out	0x2b, r25	; 43
 1a6:	8a bd       	out	0x2a, r24	; 42
	}

	for (int red = 255; red>=0; red-=delta)
	{
		setRed( red );				// 8-bits PWM on pin OCR1a
		delta -= 2;					// progressive steps down
 1a8:	22 97       	sbiw	r28, 0x02	; 2
		wait(100);					// delay of 100 ms (busy waiting)
 1aa:	84 e6       	ldi	r24, 0x64	; 100
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	7f df       	rcall	.-258    	; 0xae <wait>
		setBlue( blue );				// 8-bits PWM on pin OCR1a
		delta2 += 2;					// progressive steps up
		wait(100);					// delay of 100 ms (busy waiting)
	}

	for (int red = 255; red>=0; red-=delta)
 1b0:	ac 1a       	sub	r10, r28
 1b2:	bd 0a       	sbc	r11, r29
 1b4:	aa f7       	brpl	.-22     	; 0x1a0 <alleKleuren+0xac>
 1b6:	c7 2d       	mov	r28, r7
 1b8:	d6 2d       	mov	r29, r6
 1ba:	ce 01       	movw	r24, r28
 1bc:	99 27       	eor	r25, r25
}

// Set pulse width for Green on pin PB5, 0=off, 255=max
void setGreen( unsigned char green )
{
	OCR1B = green;
 1be:	99 bd       	out	0x29, r25	; 41
 1c0:	88 bd       	out	0x28, r24	; 40
	}

	for (int green = 255; green>=0; green-=delta1)
	{
		setGreen( green );				// 8-bits PWM on pin OCR1a
		delta1 -= 2;					// progressive steps up
 1c2:	02 50       	subi	r16, 0x02	; 2
 1c4:	11 09       	sbc	r17, r1
		wait(100);					// delay of 100 ms (busy waiting)
 1c6:	84 e6       	ldi	r24, 0x64	; 100
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	71 df       	rcall	.-286    	; 0xae <wait>
		setRed( red );				// 8-bits PWM on pin OCR1a
		delta -= 2;					// progressive steps down
		wait(100);					// delay of 100 ms (busy waiting)
	}

	for (int green = 255; green>=0; green-=delta1)
 1cc:	c0 1b       	sub	r28, r16
 1ce:	d1 0b       	sbc	r29, r17
 1d0:	a2 f7       	brpl	.-24     	; 0x1ba <alleKleuren+0xc6>
 1d2:	c7 2d       	mov	r28, r7
 1d4:	d6 2d       	mov	r29, r6
 1d6:	ce 01       	movw	r24, r28
 1d8:	99 27       	eor	r25, r25
}

// Set pulse width for Blue on pin PB5, 0=off, 255=max
void setBlue( unsigned char blue )
{
	OCR1C = blue;
 1da:	f6 01       	movw	r30, r12
 1dc:	91 83       	std	Z+1, r25	; 0x01
 1de:	80 83       	st	Z, r24
	}
	
	for (int blue = 255; blue>=0; blue-=delta2)
	{
		setBlue( blue );				// 8-bits PWM on pin OCR1a
		delta2 -= 2;					// progressive steps up
 1e0:	f2 e0       	ldi	r31, 0x02	; 2
 1e2:	ef 1a       	sub	r14, r31
 1e4:	f1 08       	sbc	r15, r1
		wait(100);					// delay of 100 ms (busy waiting)
 1e6:	84 e6       	ldi	r24, 0x64	; 100
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	61 df       	rcall	.-318    	; 0xae <wait>
		setGreen( green );				// 8-bits PWM on pin OCR1a
		delta1 -= 2;					// progressive steps up
		wait(100);					// delay of 100 ms (busy waiting)
	}
	
	for (int blue = 255; blue>=0; blue-=delta2)
 1ec:	ce 19       	sub	r28, r14
 1ee:	df 09       	sbc	r29, r15
 1f0:	92 f7       	brpl	.-28     	; 0x1d6 <alleKleuren+0xe2>
 1f2:	91 cf       	rjmp	.-222    	; 0x116 <alleKleuren+0x22>

000001f4 <main>:


// Main program: Counting on T1
int main( void )
{
	DDRB = 0xFF;	
 1f4:	8f ef       	ldi	r24, 0xFF	; 255
 1f6:	87 bb       	out	0x17, r24	; 23
	DDRF = 0x00;					// set PORTF for input (ADC)
 1f8:	10 92 61 00 	sts	0x0061, r1
	DDRA = 0xFF;					// set PORTA for output
 1fc:	8a bb       	out	0x1a, r24	; 26
	adcInit();						// initialize ADC
 1fe:	75 df       	rcall	.-278    	; 0xea <adcInit>
	timer1Init();
 200:	67 df       	rcall	.-306    	; 0xd0 <timer1Init>

	while (1)
	{
		ADCSRA |= BIT(6);				// Start ADC
 202:	36 9a       	sbi	0x06, 6	; 6
		while ( ADCSRA & BIT(6) ) ;		// Wait for completion
 204:	36 99       	sbic	0x06, 6	; 6
 206:	fe cf       	rjmp	.-4      	; 0x204 <main+0x10>
		setRed(ADCH);					// Show MSB (bit 9:2) of ADC
 208:	85 b1       	in	r24, 0x05	; 5
}

// Set pulse width for RED on pin PB5, 0=off, 255=max
void setRed( unsigned char red )
{
	OCR1A = red;
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	9b bd       	out	0x2b, r25	; 43
 20e:	8a bd       	out	0x2a, r24	; 42
	while (1)
	{
		ADCSRA |= BIT(6);				// Start ADC
		while ( ADCSRA & BIT(6) ) ;		// Wait for completion
		setRed(ADCH);					// Show MSB (bit 9:2) of ADC
		wait(100);						// every 50 ms (busy waiting)
 210:	84 e6       	ldi	r24, 0x64	; 100
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	4c df       	rcall	.-360    	; 0xae <wait>
		//opgaveextra();
		alleKleuren();
 216:	6e df       	rcall	.-292    	; 0xf4 <alleKleuren>

00000218 <_exit>:
 218:	f8 94       	cli

0000021a <__stop_program>:
 21a:	ff cf       	rjmp	.-2      	; 0x21a <__stop_program>
