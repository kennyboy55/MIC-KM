
MIC-Week4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000232  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001de  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000232  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000264  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d09  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000239  00000000  00000000  00001011  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006bd  00000000  00000000  0000124a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b4  00000000  00000000  00001908  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000021e  00000000  00000000  000019bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000793  00000000  00000000  00001bda  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001d8  00000000  00000000  0000236d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a0 30       	cpi	r26, 0x00	; 0
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	86 d0       	rcall	.+268    	; 0x1b6 <main>
  aa:	97 c0       	rjmp	.+302    	; 0x1da <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <wait>:
}

// Set pulse width for Blue on pin PB5, 0=off, 255=max
void setBlue( unsigned char blue )
{
	OCR1C = blue;
  ae:	18 16       	cp	r1, r24
  b0:	19 06       	cpc	r1, r25
  b2:	6c f4       	brge	.+26     	; 0xce <wait+0x20>
  b4:	20 e0       	ldi	r18, 0x00	; 0
  b6:	30 e0       	ldi	r19, 0x00	; 0
  b8:	ef ec       	ldi	r30, 0xCF	; 207
  ba:	f7 e0       	ldi	r31, 0x07	; 7
  bc:	31 97       	sbiw	r30, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <wait+0xe>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <wait+0x14>
  c2:	00 00       	nop
  c4:	2f 5f       	subi	r18, 0xFF	; 255
  c6:	3f 4f       	sbci	r19, 0xFF	; 255
  c8:	28 17       	cp	r18, r24
  ca:	39 07       	cpc	r19, r25
  cc:	a9 f7       	brne	.-22     	; 0xb8 <wait+0xa>
  ce:	08 95       	ret

000000d0 <timer1Init>:
  d0:	1b bc       	out	0x2b, r1	; 43
  d2:	1a bc       	out	0x2a, r1	; 42
  d4:	19 bc       	out	0x29, r1	; 41
  d6:	18 bc       	out	0x28, r1	; 40
  d8:	10 92 79 00 	sts	0x0079, r1
  dc:	10 92 78 00 	sts	0x0078, r1
  e0:	89 ea       	ldi	r24, 0xA9	; 169
  e2:	8f bd       	out	0x2f, r24	; 47
  e4:	8b e0       	ldi	r24, 0x0B	; 11
  e6:	8e bd       	out	0x2e, r24	; 46
  e8:	08 95       	ret

000000ea <adcInit>:
// void setBlue( unsigned char blue)

// Initialize ADC:
void adcInit( void )
{
	ADMUX = 0b11100001;			// AREF=2,56 V, result left adjusted, channel1 at pin PF1
  ea:	81 ee       	ldi	r24, 0xE1	; 225
  ec:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0b10000110;		// ADC-enable, no interrupt, no free running, division by 64
  ee:	86 e8       	ldi	r24, 0x86	; 134
  f0:	86 b9       	out	0x06, r24	; 6
  f2:	08 95       	ret

000000f4 <alleKleuren>:
	}
}

int alleKleuren(void)
{
	DDRB = 0xFF;					// set PORTB for compare output
  f4:	8f ef       	ldi	r24, 0xFF	; 255
  f6:	87 bb       	out	0x17, r24	; 23
	timer1Init();
  f8:	eb df       	rcall	.-42     	; 0xd0 <timer1Init>
	wait(100);
  fa:	84 e6       	ldi	r24, 0x64	; 100
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	d7 df       	rcall	.-82     	; 0xae <wait>
}

// Set pulse width for RED on pin PB5, 0=off, 255=max
void setRed( unsigned char red )
{
	OCR1A = red;
 100:	0f 2e       	mov	r0, r31
 102:	fa e4       	ldi	r31, 0x4A	; 74
 104:	af 2e       	mov	r10, r31
 106:	b1 2c       	mov	r11, r1
 108:	f0 2d       	mov	r31, r0
 10a:	81 2c       	mov	r8, r1
 10c:	91 2c       	mov	r9, r1
}

// Set pulse width for Blue on pin PB5, 0=off, 255=max
void setBlue( unsigned char blue )
{
	OCR1C = blue;
 10e:	c8 e7       	ldi	r28, 0x78	; 120
 110:	d0 e0       	ldi	r29, 0x00	; 0
		{
			setGreen( green );				// 8-bits PWM on pin OCR1a
			delta += 2;					// progressive steps up
			wait(10);					// delay of 100 ms (busy waiting)

			for (int blue = 0; blue<=255; blue+=delta2)
 112:	38 2c       	mov	r3, r8
 114:	29 2c       	mov	r2, r9
 116:	48 2c       	mov	r4, r8
 118:	59 2c       	mov	r5, r9
}

// Set pulse width for RED on pin PB5, 0=off, 255=max
void setRed( unsigned char red )
{
	OCR1A = red;
 11a:	f5 01       	movw	r30, r10
 11c:	91 82       	std	Z+1, r9	; 0x01
 11e:	80 82       	st	Z, r8
}

// Set pulse width for Blue on pin PB5, 0=off, 255=max
void setBlue( unsigned char blue )
{
	OCR1C = blue;
 120:	99 82       	std	Y+1, r9	; 0x01
 122:	88 82       	st	Y, r8
}

// Set pulse width for Green on pin PB5, 0=off, 255=max
void setGreen( unsigned char green )
{
	OCR1B = green;
 124:	99 bc       	out	0x29, r9	; 41
 126:	88 bc       	out	0x28, r8	; 40
		int delta2 = 1;
		setRed (0);
		setBlue(0);
		setGreen(0);

	for (int red = 0; red<=255; red+=delta)
 128:	64 01       	movw	r12, r8
	timer1Init();
	wait(100);

	while (1)
	{
		int delta = 1;
 12a:	ee 24       	eor	r14, r14
 12c:	e3 94       	inc	r14
 12e:	f1 2c       	mov	r15, r1
 130:	c6 01       	movw	r24, r12
 132:	99 27       	eor	r25, r25
}

// Set pulse width for RED on pin PB5, 0=off, 255=max
void setRed( unsigned char red )
{
	OCR1A = red;
 134:	f5 01       	movw	r30, r10
 136:	91 83       	std	Z+1, r25	; 0x01
 138:	80 83       	st	Z, r24

	for (int red = 0; red<=255; red+=delta)
	{
		setRed( red );				// 8-bits PWM on pin OCR1a
		delta += 2;					// progressive steps up
		wait(10);					// delay of 100 ms (busy waiting)
 13a:	8a e0       	ldi	r24, 0x0A	; 10
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	b7 df       	rcall	.-146    	; 0xae <wait>

		for (int green = 0; green<=255; green+=delta1)
 140:	03 2d       	mov	r16, r3
 142:	12 2d       	mov	r17, r2
 144:	c8 01       	movw	r24, r16
 146:	99 27       	eor	r25, r25
}

// Set pulse width for Green on pin PB5, 0=off, 255=max
void setGreen( unsigned char green )
{
	OCR1B = green;
 148:	99 bd       	out	0x29, r25	; 41
 14a:	88 bd       	out	0x28, r24	; 40

		for (int green = 0; green<=255; green+=delta1)
		{
			setGreen( green );				// 8-bits PWM on pin OCR1a
			delta += 2;					// progressive steps up
			wait(10);					// delay of 100 ms (busy waiting)
 14c:	8a e0       	ldi	r24, 0x0A	; 10
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	ae df       	rcall	.-164    	; 0xae <wait>

			for (int blue = 0; blue<=255; blue+=delta2)
 152:	64 2c       	mov	r6, r4
 154:	75 2c       	mov	r7, r5
 156:	c3 01       	movw	r24, r6
 158:	99 27       	eor	r25, r25
}

// Set pulse width for Blue on pin PB5, 0=off, 255=max
void setBlue( unsigned char blue )
{
	OCR1C = blue;
 15a:	99 83       	std	Y+1, r25	; 0x01
 15c:	88 83       	st	Y, r24

			for (int blue = 0; blue<=255; blue+=delta2)
			{
				setBlue( blue );				// 8-bits PWM on pin OCR1a
				delta += 2;					// progressive steps up
				wait(10);					// delay of 100 ms (busy waiting)
 15e:	8a e0       	ldi	r24, 0x0A	; 10
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	a5 df       	rcall	.-182    	; 0xae <wait>
		{
			setGreen( green );				// 8-bits PWM on pin OCR1a
			delta += 2;					// progressive steps up
			wait(10);					// delay of 100 ms (busy waiting)

			for (int blue = 0; blue<=255; blue+=delta2)
 164:	ff ef       	ldi	r31, 0xFF	; 255
 166:	6f 1a       	sub	r6, r31
 168:	7f 0a       	sbc	r7, r31
 16a:	61 14       	cp	r6, r1
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	78 06       	cpc	r7, r24
 170:	91 f7       	brne	.-28     	; 0x156 <alleKleuren+0x62>
	{
		setRed( red );				// 8-bits PWM on pin OCR1a
		delta += 2;					// progressive steps up
		wait(10);					// delay of 100 ms (busy waiting)

		for (int green = 0; green<=255; green+=delta1)
 172:	0f 5f       	subi	r16, 0xFF	; 255
 174:	1f 4f       	sbci	r17, 0xFF	; 255
 176:	01 15       	cp	r16, r1
 178:	e1 e0       	ldi	r30, 0x01	; 1
 17a:	1e 07       	cpc	r17, r30
 17c:	19 f7       	brne	.-58     	; 0x144 <alleKleuren+0x50>
 17e:	c7 01       	movw	r24, r14
 180:	8e 5f       	subi	r24, 0xFE	; 254
 182:	9d 4f       	sbci	r25, 0xFD	; 253
 184:	7c 01       	movw	r14, r24
		int delta2 = 1;
		setRed (0);
		setBlue(0);
		setGreen(0);

	for (int red = 0; red<=255; red+=delta)
 186:	c8 0e       	add	r12, r24
 188:	d9 1e       	adc	r13, r25
 18a:	ff ef       	ldi	r31, 0xFF	; 255
 18c:	cf 16       	cp	r12, r31
 18e:	d1 04       	cpc	r13, r1
 190:	79 f2       	breq	.-98     	; 0x130 <alleKleuren+0x3c>
 192:	74 f2       	brlt	.-100    	; 0x130 <alleKleuren+0x3c>
 194:	0f ef       	ldi	r16, 0xFF	; 255
 196:	10 e0       	ldi	r17, 0x00	; 0
 198:	c8 01       	movw	r24, r16
 19a:	99 27       	eor	r25, r25
}

// Set pulse width for RED on pin PB5, 0=off, 255=max
void setRed( unsigned char red )
{
	OCR1A = red;
 19c:	f5 01       	movw	r30, r10
 19e:	91 83       	std	Z+1, r25	; 0x01
 1a0:	80 83       	st	Z, r24
	}

	for (int red = 255; red>=0; red-=delta)
	{
		setRed( red );				// 8-bits PWM on pin OCR1a
		delta -= 2;					// progressive steps down
 1a2:	f2 e0       	ldi	r31, 0x02	; 2
 1a4:	ef 1a       	sub	r14, r31
 1a6:	f1 08       	sbc	r15, r1
		wait(100);					// delay of 100 ms (busy waiting)
 1a8:	84 e6       	ldi	r24, 0x64	; 100
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	80 df       	rcall	.-256    	; 0xae <wait>
			}
		}
			
	}

	for (int red = 255; red>=0; red-=delta)
 1ae:	0e 19       	sub	r16, r14
 1b0:	1f 09       	sbc	r17, r15
 1b2:	92 f7       	brpl	.-28     	; 0x198 <alleKleuren+0xa4>
 1b4:	b2 cf       	rjmp	.-156    	; 0x11a <alleKleuren+0x26>

000001b6 <main>:


// Main program: Counting on T1
int main( void )
{
	DDRB = 0xFF;	
 1b6:	8f ef       	ldi	r24, 0xFF	; 255
 1b8:	87 bb       	out	0x17, r24	; 23
	DDRF = 0x00;					// set PORTF for input (ADC)
 1ba:	10 92 61 00 	sts	0x0061, r1
	DDRA = 0xFF;					// set PORTA for output
 1be:	8a bb       	out	0x1a, r24	; 26
	adcInit();						// initialize ADC
 1c0:	94 df       	rcall	.-216    	; 0xea <adcInit>
	timer1Init();
 1c2:	86 df       	rcall	.-244    	; 0xd0 <timer1Init>

	while (1)
	{
		ADCSRA |= BIT(6);				// Start ADC
 1c4:	36 9a       	sbi	0x06, 6	; 6
		while ( ADCSRA & BIT(6) ) ;		// Wait for completion
 1c6:	36 99       	sbic	0x06, 6	; 6
 1c8:	fe cf       	rjmp	.-4      	; 0x1c6 <main+0x10>
		setRed(ADCH);					// Show MSB (bit 9:2) of ADC
 1ca:	85 b1       	in	r24, 0x05	; 5
}

// Set pulse width for RED on pin PB5, 0=off, 255=max
void setRed( unsigned char red )
{
	OCR1A = red;
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	9b bd       	out	0x2b, r25	; 43
 1d0:	8a bd       	out	0x2a, r24	; 42
	while (1)
	{
		ADCSRA |= BIT(6);				// Start ADC
		while ( ADCSRA & BIT(6) ) ;		// Wait for completion
		setRed(ADCH);					// Show MSB (bit 9:2) of ADC
		wait(100);						// every 50 ms (busy waiting)
 1d2:	84 e6       	ldi	r24, 0x64	; 100
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	6b df       	rcall	.-298    	; 0xae <wait>
		//opgaveextra();
		//testColor();
		alleKleuren();
 1d8:	8d df       	rcall	.-230    	; 0xf4 <alleKleuren>

000001da <_exit>:
 1da:	f8 94       	cli

000001dc <__stop_program>:
 1dc:	ff cf       	rjmp	.-2      	; 0x1dc <__stop_program>
