
MIC-Week4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000286  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000232  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000286  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d56  00000000  00000000  0000037c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002ef  00000000  00000000  000010d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000752  00000000  00000000  000013c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000104  00000000  00000000  00001b14  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000276  00000000  00000000  00001c18  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000542  00000000  00000000  00001e8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000170  00000000  00000000  000023d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e3       	ldi	r30, 0x32	; 50
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 30       	cpi	r26, 0x00	; 0
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	b4 d0       	rcall	.+360    	; 0x22c <main>
  c4:	b4 c0       	rjmp	.+360    	; 0x22e <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <wait>:
		//setGreen(ADCH);					
		wait(100);						// every 50 ms (busy waiting)
		//alleKleuren();
		//opgaveextra();
		setWithButton();
	}
  c8:	18 16       	cp	r1, r24
  ca:	19 06       	cpc	r1, r25
  cc:	6c f4       	brge	.+26     	; 0xe8 <wait+0x20>
  ce:	20 e0       	ldi	r18, 0x00	; 0
  d0:	30 e0       	ldi	r19, 0x00	; 0
  d2:	ef ec       	ldi	r30, 0xCF	; 207
  d4:	f7 e0       	ldi	r31, 0x07	; 7
  d6:	31 97       	sbiw	r30, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <wait+0xe>
  da:	00 c0       	rjmp	.+0      	; 0xdc <wait+0x14>
  dc:	00 00       	nop
  de:	2f 5f       	subi	r18, 0xFF	; 255
  e0:	3f 4f       	sbci	r19, 0xFF	; 255
  e2:	28 17       	cp	r18, r24
  e4:	39 07       	cpc	r19, r25
  e6:	a9 f7       	brne	.-22     	; 0xd2 <wait+0xa>
  e8:	08 95       	ret

000000ea <timer1Init>:
  ea:	1b bc       	out	0x2b, r1	; 43
  ec:	1a bc       	out	0x2a, r1	; 42
  ee:	19 bc       	out	0x29, r1	; 41
  f0:	18 bc       	out	0x28, r1	; 40
  f2:	10 92 79 00 	sts	0x0079, r1
  f6:	10 92 78 00 	sts	0x0078, r1
  fa:	89 ea       	ldi	r24, 0xA9	; 169
  fc:	8f bd       	out	0x2f, r24	; 47
  fe:	8b e0       	ldi	r24, 0x0B	; 11
 100:	8e bd       	out	0x2e, r24	; 46
 102:	08 95       	ret

00000104 <OpgaveB23>:
	}
}

int OpgaveB23(void)
{
	DDRB = 0xFF;					// set PORTB for compare output
 104:	8f ef       	ldi	r24, 0xFF	; 255
 106:	87 bb       	out	0x17, r24	; 23
	timer1Init();
 108:	f0 df       	rcall	.-32     	; 0xea <timer1Init>
	wait(100);
 10a:	84 e6       	ldi	r24, 0x64	; 100
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	dc df       	rcall	.-72     	; 0xc8 <wait>
}

// Set pulse width for RED on pin PB5, 0=off, 255=max
void setRed( unsigned char red )
{
	OCR1A = red;
 110:	1b bc       	out	0x2b, r1	; 43
 112:	1a bc       	out	0x2a, r1	; 42
}

// Set pulse width for Blue on pin PB5, 0=off, 255=max
void setBlue( unsigned char blue )
{
	OCR1C = blue;
 114:	10 92 79 00 	sts	0x0079, r1
 118:	10 92 78 00 	sts	0x0078, r1
}

// Set pulse width for Green on pin PB5, 0=off, 255=max
void setGreen( unsigned char green )
{
	OCR1B = green;
 11c:	19 bc       	out	0x29, r1	; 41
 11e:	18 bc       	out	0x28, r1	; 40
	int delta = 1;
	setRed (0);
	setBlue(0);
	setGreen(0);

	for (int red = 0; red<=255; red+=delta)
 120:	c0 e0       	ldi	r28, 0x00	; 0
 122:	d0 e0       	ldi	r29, 0x00	; 0
	timer1Init();
	wait(100);

	int delta1 = 1;
	int delta2 = 1;
	int delta = 1;
 124:	ee 24       	eor	r14, r14
 126:	e3 94       	inc	r14
 128:	f1 2c       	mov	r15, r1
 12a:	ce 01       	movw	r24, r28
 12c:	99 27       	eor	r25, r25
}

// Set pulse width for RED on pin PB5, 0=off, 255=max
void setRed( unsigned char red )
{
	OCR1A = red;
 12e:	9b bd       	out	0x2b, r25	; 43
 130:	8a bd       	out	0x2a, r24	; 42
	setGreen(0);

	for (int red = 0; red<=255; red+=delta)
	{
		setRed( red );				// 8-bits PWM on pin OCR1a
		delta += 2;					// progressive steps up
 132:	82 e0       	ldi	r24, 0x02	; 2
 134:	e8 0e       	add	r14, r24
 136:	f1 1c       	adc	r15, r1
		wait(100);					// delay of 100 ms (busy waiting)
 138:	84 e6       	ldi	r24, 0x64	; 100
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	c5 df       	rcall	.-118    	; 0xc8 <wait>
	int delta = 1;
	setRed (0);
	setBlue(0);
	setGreen(0);

	for (int red = 0; red<=255; red+=delta)
 13e:	ce 0d       	add	r28, r14
 140:	df 1d       	adc	r29, r15
 142:	cf 3f       	cpi	r28, 0xFF	; 255
 144:	d1 05       	cpc	r29, r1
 146:	89 f3       	breq	.-30     	; 0x12a <OpgaveB23+0x26>
 148:	84 f3       	brlt	.-32     	; 0x12a <OpgaveB23+0x26>
 14a:	cc 24       	eor	r12, r12
 14c:	c3 94       	inc	r12
 14e:	d1 2c       	mov	r13, r1
 150:	c1 e0       	ldi	r28, 0x01	; 1
 152:	d0 e0       	ldi	r29, 0x00	; 0
	}

	while (1)
	{

		for (int green = 0; green<=255; green+=delta1)
 154:	81 2c       	mov	r8, r1
 156:	91 2c       	mov	r9, r1
}

// Set pulse width for Blue on pin PB5, 0=off, 255=max
void setBlue( unsigned char blue )
{
	OCR1C = blue;
 158:	0f 2e       	mov	r0, r31
 15a:	f8 e7       	ldi	r31, 0x78	; 120
 15c:	af 2e       	mov	r10, r31
 15e:	b1 2c       	mov	r11, r1
 160:	f0 2d       	mov	r31, r0
 162:	77 24       	eor	r7, r7
 164:	7a 94       	dec	r7
 166:	61 2c       	mov	r6, r1
	}

	while (1)
	{

		for (int green = 0; green<=255; green+=delta1)
 168:	08 2d       	mov	r16, r8
 16a:	19 2d       	mov	r17, r9
 16c:	c8 01       	movw	r24, r16
 16e:	99 27       	eor	r25, r25
}

// Set pulse width for Green on pin PB5, 0=off, 255=max
void setGreen( unsigned char green )
{
	OCR1B = green;
 170:	99 bd       	out	0x29, r25	; 41
 172:	88 bd       	out	0x28, r24	; 40
	{

		for (int green = 0; green<=255; green+=delta1)
		{
			setGreen( green );				// 8-bits PWM on pin OCR1a
			delta1 += 2;					// progressive steps up
 174:	22 96       	adiw	r28, 0x02	; 2
			wait(100);					// delay of 100 ms (busy waiting)
 176:	84 e6       	ldi	r24, 0x64	; 100
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	a6 df       	rcall	.-180    	; 0xc8 <wait>
	}

	while (1)
	{

		for (int green = 0; green<=255; green+=delta1)
 17c:	0c 0f       	add	r16, r28
 17e:	1d 1f       	adc	r17, r29
 180:	0f 3f       	cpi	r16, 0xFF	; 255
 182:	11 05       	cpc	r17, r1
 184:	99 f3       	breq	.-26     	; 0x16c <OpgaveB23+0x68>
 186:	94 f3       	brlt	.-28     	; 0x16c <OpgaveB23+0x68>
 188:	08 2d       	mov	r16, r8
 18a:	19 2d       	mov	r17, r9
 18c:	c8 01       	movw	r24, r16
 18e:	99 27       	eor	r25, r25
}

// Set pulse width for Blue on pin PB5, 0=off, 255=max
void setBlue( unsigned char blue )
{
	OCR1C = blue;
 190:	f5 01       	movw	r30, r10
 192:	91 83       	std	Z+1, r25	; 0x01
 194:	80 83       	st	Z, r24
		}

		for (int blue = 0; blue<=255; blue+=delta2)
		{
			setBlue( blue );				// 8-bits PWM on pin OCR1a
			delta2 += 2;					// progressive steps up
 196:	f2 e0       	ldi	r31, 0x02	; 2
 198:	cf 0e       	add	r12, r31
 19a:	d1 1c       	adc	r13, r1
			wait(100);					// delay of 100 ms (busy waiting)
 19c:	84 e6       	ldi	r24, 0x64	; 100
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	93 df       	rcall	.-218    	; 0xc8 <wait>
			setGreen( green );				// 8-bits PWM on pin OCR1a
			delta1 += 2;					// progressive steps up
			wait(100);					// delay of 100 ms (busy waiting)
		}

		for (int blue = 0; blue<=255; blue+=delta2)
 1a2:	0c 0d       	add	r16, r12
 1a4:	1d 1d       	adc	r17, r13
 1a6:	0f 3f       	cpi	r16, 0xFF	; 255
 1a8:	11 05       	cpc	r17, r1
 1aa:	81 f3       	breq	.-32     	; 0x18c <OpgaveB23+0x88>
 1ac:	7c f3       	brlt	.-34     	; 0x18c <OpgaveB23+0x88>
 1ae:	07 2d       	mov	r16, r7
 1b0:	16 2d       	mov	r17, r6
 1b2:	c8 01       	movw	r24, r16
 1b4:	99 27       	eor	r25, r25
}

// Set pulse width for RED on pin PB5, 0=off, 255=max
void setRed( unsigned char red )
{
	OCR1A = red;
 1b6:	9b bd       	out	0x2b, r25	; 43
 1b8:	8a bd       	out	0x2a, r24	; 42
		}

		for (int red = 255; red>=0; red-=delta)
		{
			setRed( red );				// 8-bits PWM on pin OCR1a
			delta -= 2;					// progressive steps down
 1ba:	82 e0       	ldi	r24, 0x02	; 2
 1bc:	e8 1a       	sub	r14, r24
 1be:	f1 08       	sbc	r15, r1
			wait(100);					// delay of 100 ms (busy waiting)
 1c0:	84 e6       	ldi	r24, 0x64	; 100
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	81 df       	rcall	.-254    	; 0xc8 <wait>
			setBlue( blue );				// 8-bits PWM on pin OCR1a
			delta2 += 2;					// progressive steps up
			wait(100);					// delay of 100 ms (busy waiting)
		}

		for (int red = 255; red>=0; red-=delta)
 1c6:	0e 19       	sub	r16, r14
 1c8:	1f 09       	sbc	r17, r15
 1ca:	9a f7       	brpl	.-26     	; 0x1b2 <OpgaveB23+0xae>
 1cc:	07 2d       	mov	r16, r7
 1ce:	16 2d       	mov	r17, r6
 1d0:	c8 01       	movw	r24, r16
 1d2:	99 27       	eor	r25, r25
}

// Set pulse width for Green on pin PB5, 0=off, 255=max
void setGreen( unsigned char green )
{
	OCR1B = green;
 1d4:	99 bd       	out	0x29, r25	; 41
 1d6:	88 bd       	out	0x28, r24	; 40
		}

		for (int green = 255; green>=0; green-=delta1)
		{
			setGreen( green );				// 8-bits PWM on pin OCR1a
			delta1 -= 2;					// progressive steps up
 1d8:	22 97       	sbiw	r28, 0x02	; 2
			wait(100);					// delay of 100 ms (busy waiting)
 1da:	84 e6       	ldi	r24, 0x64	; 100
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	74 df       	rcall	.-280    	; 0xc8 <wait>
			setRed( red );				// 8-bits PWM on pin OCR1a
			delta -= 2;					// progressive steps down
			wait(100);					// delay of 100 ms (busy waiting)
		}

		for (int green = 255; green>=0; green-=delta1)
 1e0:	0c 1b       	sub	r16, r28
 1e2:	1d 0b       	sbc	r17, r29
 1e4:	aa f7       	brpl	.-22     	; 0x1d0 <OpgaveB23+0xcc>
 1e6:	08 2d       	mov	r16, r8
 1e8:	19 2d       	mov	r17, r9
 1ea:	c8 01       	movw	r24, r16
 1ec:	99 27       	eor	r25, r25
}

// Set pulse width for RED on pin PB5, 0=off, 255=max
void setRed( unsigned char red )
{
	OCR1A = red;
 1ee:	9b bd       	out	0x2b, r25	; 43
 1f0:	8a bd       	out	0x2a, r24	; 42
		}

		for (int red = 0; red<=255; red+=delta)
		{
			setRed( red );				// 8-bits PWM on pin OCR1a
			delta += 2;					// progressive steps up
 1f2:	e2 e0       	ldi	r30, 0x02	; 2
 1f4:	ee 0e       	add	r14, r30
 1f6:	f1 1c       	adc	r15, r1
			wait(100);					// delay of 100 ms (busy waiting)
 1f8:	84 e6       	ldi	r24, 0x64	; 100
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	65 df       	rcall	.-310    	; 0xc8 <wait>
			setGreen( green );				// 8-bits PWM on pin OCR1a
			delta1 -= 2;					// progressive steps up
			wait(100);					// delay of 100 ms (busy waiting)
		}

		for (int red = 0; red<=255; red+=delta)
 1fe:	0e 0d       	add	r16, r14
 200:	1f 1d       	adc	r17, r15
 202:	0f 3f       	cpi	r16, 0xFF	; 255
 204:	11 05       	cpc	r17, r1
 206:	89 f3       	breq	.-30     	; 0x1ea <OpgaveB23+0xe6>
 208:	84 f3       	brlt	.-32     	; 0x1ea <OpgaveB23+0xe6>
 20a:	07 2d       	mov	r16, r7
 20c:	16 2d       	mov	r17, r6
 20e:	c8 01       	movw	r24, r16
 210:	99 27       	eor	r25, r25
}

// Set pulse width for Blue on pin PB5, 0=off, 255=max
void setBlue( unsigned char blue )
{
	OCR1C = blue;
 212:	f5 01       	movw	r30, r10
 214:	91 83       	std	Z+1, r25	; 0x01
 216:	80 83       	st	Z, r24
		}
	
		for (int blue = 255; blue>=0; blue-=delta2)
		{
			setBlue( blue );				// 8-bits PWM on pin OCR1a
			delta2 -= 2;					// progressive steps up
 218:	f2 e0       	ldi	r31, 0x02	; 2
 21a:	cf 1a       	sub	r12, r31
 21c:	d1 08       	sbc	r13, r1
			wait(100);					// delay of 100 ms (busy waiting)
 21e:	84 e6       	ldi	r24, 0x64	; 100
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	52 df       	rcall	.-348    	; 0xc8 <wait>
			setRed( red );				// 8-bits PWM on pin OCR1a
			delta += 2;					// progressive steps up
			wait(100);					// delay of 100 ms (busy waiting)
		}
	
		for (int blue = 255; blue>=0; blue-=delta2)
 224:	0c 19       	sub	r16, r12
 226:	1d 09       	sbc	r17, r13
 228:	92 f7       	brpl	.-28     	; 0x20e <OpgaveB23+0x10a>
 22a:	9e cf       	rjmp	.-196    	; 0x168 <OpgaveB23+0x64>

0000022c <main>:

int main( void )
{

	//OpgaveB22();
	OpgaveB23();
 22c:	6b df       	rcall	.-298    	; 0x104 <OpgaveB23>

0000022e <_exit>:
 22e:	f8 94       	cli

00000230 <__stop_program>:
 230:	ff cf       	rjmp	.-2      	; 0x230 <__stop_program>
