
MIC-Week3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000500  00800100  0000039e  00000432  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000039e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800600  00800600  00000932  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000932  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000964  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000009a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d95  00000000  00000000  00000a38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000450  00000000  00000000  000017cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006a6  00000000  00000000  00001c1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000178  00000000  00000000  000022c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000243c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004aa  00000000  00000000  000026c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002b73  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	b3 c0       	rjmp	.+358    	; 0x190 <__vector_10>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	16 e0       	ldi	r17, 0x06	; 6
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e9       	ldi	r30, 0x9E	; 158
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	26 e0       	ldi	r18, 0x06	; 6
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b6 e0       	ldi	r27, 0x06	; 6
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 30       	cpi	r26, 0x08	; 8
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	5b d1       	rcall	.+694    	; 0x37a <main>
  c4:	6a c1       	rjmp	.+724    	; 0x39a <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <display_char>:
	 }
 }

 void display_char( unsigned char dat )
 {
	 PORTC = dat & 0xF0; // hoge nibble
  c8:	98 2f       	mov	r25, r24
  ca:	90 7f       	andi	r25, 0xF0	; 240
  cc:	95 bb       	out	0x15, r25	; 21
	 PORTC = PORTC | 0x0C; // Enable on (EN = 1, RS=1),
  ce:	95 b3       	in	r25, 0x15	; 21
  d0:	9c 60       	ori	r25, 0x0C	; 12
  d2:	95 bb       	out	0x15, r25	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d4:	ef e9       	ldi	r30, 0x9F	; 159
  d6:	ff e0       	ldi	r31, 0x0F	; 15
  d8:	31 97       	sbiw	r30, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <display_char+0x10>
  dc:	00 c0       	rjmp	.+0      	; 0xde <display_char+0x16>
  de:	00 00       	nop
	 _delay_ms(2); // wait 1 ms
	 PORTC = 0x04; // Enable off (EN = 0, RS = 1)
  e0:	94 e0       	ldi	r25, 0x04	; 4
  e2:	95 bb       	out	0x15, r25	; 21
  e4:	ef e9       	ldi	r30, 0x9F	; 159
  e6:	ff e0       	ldi	r31, 0x0F	; 15
  e8:	31 97       	sbiw	r30, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <display_char+0x20>
  ec:	00 c0       	rjmp	.+0      	; 0xee <display_char+0x26>
  ee:	00 00       	nop

	 _delay_ms(2); // wait 1 ms

	 PORTC = (dat & 0x0F) << 4; // lage nibble
  f0:	f0 e1       	ldi	r31, 0x10	; 16
  f2:	8f 9f       	mul	r24, r31
  f4:	c0 01       	movw	r24, r0
  f6:	11 24       	eor	r1, r1
  f8:	85 bb       	out	0x15, r24	; 21
	 PORTC = PORTC | 0x0C; // Enable on (RS=1),
  fa:	85 b3       	in	r24, 0x15	; 21
  fc:	8c 60       	ori	r24, 0x0C	; 12
  fe:	85 bb       	out	0x15, r24	; 21
 100:	8f e9       	ldi	r24, 0x9F	; 159
 102:	9f e0       	ldi	r25, 0x0F	; 15
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <display_char+0x3c>
 108:	00 c0       	rjmp	.+0      	; 0x10a <display_char+0x42>
 10a:	00 00       	nop
	 // start (EN=1)
	 _delay_ms(2); // wait 1 ms
	 PORTC = 0x00; // stop
 10c:	15 ba       	out	0x15, r1	; 21
 10e:	08 95       	ret

00000110 <lcd_command>:
	 // (EN=0 RS=0)
 }

 void lcd_command ( unsigned char dat )
 {
	 PORTC = dat & 0xF0; // hoge nibble
 110:	98 2f       	mov	r25, r24
 112:	90 7f       	andi	r25, 0xF0	; 240
 114:	95 bb       	out	0x15, r25	; 21
	 PORTC = PORTC | 0x08; // data (RS=0),
 116:	ab 9a       	sbi	0x15, 3	; 21
 118:	ef e9       	ldi	r30, 0x9F	; 159
 11a:	ff e0       	ldi	r31, 0x0F	; 15
 11c:	31 97       	sbiw	r30, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <lcd_command+0xc>
 120:	00 c0       	rjmp	.+0      	; 0x122 <lcd_command+0x12>
 122:	00 00       	nop
	 // start (EN=1)
	 _delay_ms(2); // wait 1 ms
	 PORTC = 0x04; // stop (EN = 0)
 124:	94 e0       	ldi	r25, 0x04	; 4
 126:	95 bb       	out	0x15, r25	; 21
 128:	ef e9       	ldi	r30, 0x9F	; 159
 12a:	ff e0       	ldi	r31, 0x0F	; 15
 12c:	31 97       	sbiw	r30, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <lcd_command+0x1c>
 130:	00 c0       	rjmp	.+0      	; 0x132 <lcd_command+0x22>
 132:	00 00       	nop

	 _delay_ms(2); // wait 1 ms

	 PORTC = (dat & 0x0F) << 4; // lage nibble
 134:	f0 e1       	ldi	r31, 0x10	; 16
 136:	8f 9f       	mul	r24, r31
 138:	c0 01       	movw	r24, r0
 13a:	11 24       	eor	r1, r1
 13c:	85 bb       	out	0x15, r24	; 21
	 PORTC = PORTC | 0x08; // data (RS=0),
 13e:	ab 9a       	sbi	0x15, 3	; 21
 140:	8f e9       	ldi	r24, 0x9F	; 159
 142:	9f e0       	ldi	r25, 0x0F	; 15
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <lcd_command+0x34>
 148:	00 c0       	rjmp	.+0      	; 0x14a <lcd_command+0x3a>
 14a:	00 00       	nop
	 // start (EN=1)
	 _delay_ms(2); // wait 1 ms
	 PORTC = 0x00; // stop
 14c:	15 ba       	out	0x15, r1	; 21
 14e:	08 95       	ret

00000150 <display_text>:

 	_delay_ms(100);
 }

void display_text( int line, char *text )
{
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
 154:	eb 01       	movw	r28, r22
	// eerst de eerste 8 karakters = regel 1

	if(line)
 156:	89 2b       	or	r24, r25
 158:	19 f0       	breq	.+6      	; 0x160 <display_text+0x10>
	{
		// eerste pos regel 1
		lcd_command(0xC0);
 15a:	80 ec       	ldi	r24, 0xC0	; 192
 15c:	d9 df       	rcall	.-78     	; 0x110 <lcd_command>
 15e:	02 c0       	rjmp	.+4      	; 0x164 <display_text+0x14>
	}
	else
	{
		// regel 0
		lcd_command(0x80);
 160:	80 e8       	ldi	r24, 0x80	; 128
 162:	d6 df       	rcall	.-84     	; 0x110 <lcd_command>
	}

	int count = 0;

	while (text[count] != '\0') {
 164:	88 81       	ld	r24, Y
 166:	88 23       	and	r24, r24
 168:	59 f0       	breq	.+22     	; 0x180 <display_text+0x30>
 16a:	21 96       	adiw	r28, 0x01	; 1
		display_char( text[count] );
 16c:	ad df       	rcall	.-166    	; 0xc8 <display_char>
 16e:	8f e9       	ldi	r24, 0x9F	; 159
 170:	9f e0       	ldi	r25, 0x0F	; 15
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <display_text+0x22>
 176:	00 c0       	rjmp	.+0      	; 0x178 <display_text+0x28>
 178:	00 00       	nop
		lcd_command(0x80);
	}

	int count = 0;

	while (text[count] != '\0') {
 17a:	89 91       	ld	r24, Y+
 17c:	81 11       	cpse	r24, r1
 17e:	f6 cf       	rjmp	.-20     	; 0x16c <display_text+0x1c>
		display_char( text[count] );
		count++;

		_delay_ms(2);
	}
}
 180:	df 91       	pop	r29
 182:	cf 91       	pop	r28
 184:	08 95       	ret

00000186 <clear_display>:

void clear_display()
{
	lcd_command(0b00000001);
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	c3 df       	rcall	.-122    	; 0x110 <lcd_command>
	lcd_command(0b10000000);
 18a:	80 e8       	ldi	r24, 0x80	; 128
 18c:	c1 cf       	rjmp	.-126    	; 0x110 <lcd_command>
 18e:	08 95       	ret

00000190 <__vector_10>:
 190:	1f 92       	push	r1
 192:	0f 92       	push	r0
 194:	0f b6       	in	r0, 0x3f	; 63
 196:	0f 92       	push	r0
 198:	11 24       	eor	r1, r1
 19a:	0b b6       	in	r0, 0x3b	; 59
 19c:	0f 92       	push	r0
 19e:	2f 93       	push	r18
 1a0:	3f 93       	push	r19
 1a2:	4f 93       	push	r20
 1a4:	5f 93       	push	r21
 1a6:	6f 93       	push	r22
 1a8:	7f 93       	push	r23
 1aa:	8f 93       	push	r24
 1ac:	9f 93       	push	r25
 1ae:	af 93       	push	r26
 1b0:	bf 93       	push	r27
 1b2:	ef 93       	push	r30
 1b4:	ff 93       	push	r31
 1b6:	80 91 06 06 	lds	r24, 0x0606
 1ba:	90 91 07 06 	lds	r25, 0x0607
 1be:	82 30       	cpi	r24, 0x02	; 2
 1c0:	91 05       	cpc	r25, r1
 1c2:	e9 f4       	brne	.+58     	; 0x1fe <__vector_10+0x6e>
 1c4:	14 bc       	out	0x24, r1	; 36
 1c6:	8f e0       	ldi	r24, 0x0F	; 15
 1c8:	82 bb       	out	0x12, r24	; 18
 1ca:	dd df       	rcall	.-70     	; 0x186 <clear_display>
 1cc:	2f ef       	ldi	r18, 0xFF	; 255
 1ce:	80 e7       	ldi	r24, 0x70	; 112
 1d0:	92 e0       	ldi	r25, 0x02	; 2
 1d2:	21 50       	subi	r18, 0x01	; 1
 1d4:	80 40       	sbci	r24, 0x00	; 0
 1d6:	90 40       	sbci	r25, 0x00	; 0
 1d8:	e1 f7       	brne	.-8      	; 0x1d2 <__vector_10+0x42>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <__vector_10+0x4c>
 1dc:	00 00       	nop
 1de:	6a ee       	ldi	r22, 0xEA	; 234
 1e0:	75 e0       	ldi	r23, 0x05	; 5
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	b4 df       	rcall	.-152    	; 0x150 <display_text>
 1e8:	2f ef       	ldi	r18, 0xFF	; 255
 1ea:	84 e3       	ldi	r24, 0x34	; 52
 1ec:	9c e0       	ldi	r25, 0x0C	; 12
 1ee:	21 50       	subi	r18, 0x01	; 1
 1f0:	80 40       	sbci	r24, 0x00	; 0
 1f2:	90 40       	sbci	r25, 0x00	; 0
 1f4:	e1 f7       	brne	.-8      	; 0x1ee <__vector_10+0x5e>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <__vector_10+0x68>
 1f8:	00 00       	nop
 1fa:	12 ba       	out	0x12, r1	; 18
 1fc:	4c c0       	rjmp	.+152    	; 0x296 <__vector_10+0x106>
 1fe:	83 30       	cpi	r24, 0x03	; 3
 200:	91 05       	cpc	r25, r1
 202:	d1 f4       	brne	.+52     	; 0x238 <__vector_10+0xa8>
 204:	92 b3       	in	r25, 0x12	; 18
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	89 27       	eor	r24, r25
 20a:	82 bb       	out	0x12, r24	; 18
 20c:	80 91 04 06 	lds	r24, 0x0604
 210:	90 91 05 06 	lds	r25, 0x0605
 214:	89 2b       	or	r24, r25
 216:	39 f0       	breq	.+14     	; 0x226 <__vector_10+0x96>
 218:	8a e8       	ldi	r24, 0x8A	; 138
 21a:	84 bd       	out	0x24, r24	; 36
 21c:	10 92 05 06 	sts	0x0605, r1
 220:	10 92 04 06 	sts	0x0604, r1
 224:	38 c0       	rjmp	.+112    	; 0x296 <__vector_10+0x106>
 226:	8c e3       	ldi	r24, 0x3C	; 60
 228:	84 bd       	out	0x24, r24	; 36
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	90 93 05 06 	sts	0x0605, r25
 232:	80 93 04 06 	sts	0x0604, r24
 236:	2f c0       	rjmp	.+94     	; 0x296 <__vector_10+0x106>
 238:	04 97       	sbiw	r24, 0x04	; 4
 23a:	69 f5       	brne	.+90     	; 0x296 <__vector_10+0x106>
 23c:	e0 91 00 06 	lds	r30, 0x0600
 240:	f0 91 01 06 	lds	r31, 0x0601
 244:	ee 0f       	add	r30, r30
 246:	ff 1f       	adc	r31, r31
 248:	ee 0f       	add	r30, r30
 24a:	ff 1f       	adc	r31, r31
 24c:	e0 50       	subi	r30, 0x00	; 0
 24e:	ff 4f       	sbci	r31, 0xFF	; 255
 250:	80 81       	ld	r24, Z
 252:	91 81       	ldd	r25, Z+1	; 0x01
 254:	89 2b       	or	r24, r25
 256:	21 f0       	breq	.+8      	; 0x260 <__vector_10+0xd0>
 258:	92 b3       	in	r25, 0x12	; 18
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	89 27       	eor	r24, r25
 25e:	82 bb       	out	0x12, r24	; 18
 260:	e0 91 00 06 	lds	r30, 0x0600
 264:	f0 91 01 06 	lds	r31, 0x0601
 268:	ee 0f       	add	r30, r30
 26a:	ff 1f       	adc	r31, r31
 26c:	ee 0f       	add	r30, r30
 26e:	ff 1f       	adc	r31, r31
 270:	e0 50       	subi	r30, 0x00	; 0
 272:	ff 4f       	sbci	r31, 0xFF	; 255
 274:	40 81       	ld	r20, Z
 276:	51 81       	ldd	r21, Z+1	; 0x01
 278:	9a 01       	movw	r18, r20
 27a:	a3 e9       	ldi	r26, 0x93	; 147
 27c:	b4 e2       	ldi	r27, 0x24	; 36
 27e:	7e d0       	rcall	.+252    	; 0x37c <__umulhisi3>
 280:	48 1b       	sub	r20, r24
 282:	59 0b       	sbc	r21, r25
 284:	56 95       	lsr	r21
 286:	47 95       	ror	r20
 288:	84 0f       	add	r24, r20
 28a:	95 1f       	adc	r25, r21
 28c:	96 95       	lsr	r25
 28e:	87 95       	ror	r24
 290:	96 95       	lsr	r25
 292:	87 95       	ror	r24
 294:	84 bd       	out	0x24, r24	; 36
 296:	ff 91       	pop	r31
 298:	ef 91       	pop	r30
 29a:	bf 91       	pop	r27
 29c:	af 91       	pop	r26
 29e:	9f 91       	pop	r25
 2a0:	8f 91       	pop	r24
 2a2:	7f 91       	pop	r23
 2a4:	6f 91       	pop	r22
 2a6:	5f 91       	pop	r21
 2a8:	4f 91       	pop	r20
 2aa:	3f 91       	pop	r19
 2ac:	2f 91       	pop	r18
 2ae:	0f 90       	pop	r0
 2b0:	0b be       	out	0x3b, r0	; 59
 2b2:	0f 90       	pop	r0
 2b4:	0f be       	out	0x3f, r0	; 63
 2b6:	0f 90       	pop	r0
 2b8:	1f 90       	pop	r1
 2ba:	18 95       	reti

000002bc <opgaveextra>:
	}
}

void opgaveextra()
{
	opgave = 4;
 2bc:	84 e0       	ldi	r24, 0x04	; 4
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	90 93 07 06 	sts	0x0607, r25
 2c4:	80 93 06 06 	sts	0x0606, r24
	count = 0;
 2c8:	10 92 03 06 	sts	0x0603, r1
 2cc:	10 92 02 06 	sts	0x0602, r1
	current = 0;
 2d0:	10 92 01 06 	sts	0x0601, r1
 2d4:	10 92 00 06 	sts	0x0600, r1

	DDRD = 0xFF;
 2d8:	8f ef       	ldi	r24, 0xFF	; 255
 2da:	81 bb       	out	0x11, r24	; 17
	DDRB = 0xFF;
 2dc:	87 bb       	out	0x17, r24	; 23

	PORTB = 0x01110000;
 2de:	18 ba       	out	0x18, r1	; 24
 2e0:	2f ef       	ldi	r18, 0xFF	; 255
 2e2:	84 e3       	ldi	r24, 0x34	; 52
 2e4:	9c e0       	ldi	r25, 0x0C	; 12
 2e6:	21 50       	subi	r18, 0x01	; 1
 2e8:	80 40       	sbci	r24, 0x00	; 0
 2ea:	90 40       	sbci	r25, 0x00	; 0
 2ec:	e1 f7       	brne	.-8      	; 0x2e6 <opgaveextra+0x2a>
 2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <opgaveextra+0x34>
 2f0:	00 00       	nop

	_delay_ms(500);

	PORTB = 0;
 2f2:	18 ba       	out	0x18, r1	; 24

	TCNT2 = 0;
 2f4:	14 bc       	out	0x24, r1	; 36
	TCCR2 |= 0x03;
 2f6:	85 b5       	in	r24, 0x25	; 37
 2f8:	83 60       	ori	r24, 0x03	; 3
 2fa:	85 bd       	out	0x25, r24	; 37
	TIMSK |= (1<<6);
 2fc:	87 b7       	in	r24, 0x37	; 55
 2fe:	80 64       	ori	r24, 0x40	; 64
 300:	87 bf       	out	0x37, r24	; 55
	sei();
 302:	78 94       	sei

	while(1)
	{
		PORTB = 0x10000000;
 304:	18 ba       	out	0x18, r1	; 24

		if(count > ((mario[current].delay / 10)*8))
 306:	40 91 00 06 	lds	r20, 0x0600
 30a:	50 91 01 06 	lds	r21, 0x0601
 30e:	fa 01       	movw	r30, r20
 310:	ee 0f       	add	r30, r30
 312:	ff 1f       	adc	r31, r31
 314:	ee 0f       	add	r30, r30
 316:	ff 1f       	adc	r31, r31
 318:	e0 50       	subi	r30, 0x00	; 0
 31a:	ff 4f       	sbci	r31, 0xFF	; 255
 31c:	22 81       	ldd	r18, Z+2	; 0x02
 31e:	33 81       	ldd	r19, Z+3	; 0x03
 320:	ad ec       	ldi	r26, 0xCD	; 205
 322:	bc ec       	ldi	r27, 0xCC	; 204
 324:	2b d0       	rcall	.+86     	; 0x37c <__umulhisi3>
 326:	88 7f       	andi	r24, 0xF8	; 248
 328:	20 91 02 06 	lds	r18, 0x0602
 32c:	30 91 03 06 	lds	r19, 0x0603
 330:	82 17       	cp	r24, r18
 332:	93 07       	cpc	r25, r19
 334:	88 f4       	brcc	.+34     	; 0x358 <opgaveextra+0x9c>
		{
			current++;
 336:	4f 5f       	subi	r20, 0xFF	; 255
 338:	5f 4f       	sbci	r21, 0xFF	; 255
 33a:	50 93 01 06 	sts	0x0601, r21
 33e:	40 93 00 06 	sts	0x0600, r20

			count = 0;
 342:	10 92 03 06 	sts	0x0603, r1
 346:	10 92 02 06 	sts	0x0602, r1

			if(current >= NELEMS(song))
 34a:	48 31       	cpi	r20, 0x18	; 24
 34c:	51 05       	cpc	r21, r1
 34e:	20 f0       	brcs	.+8      	; 0x358 <opgaveextra+0x9c>
				current = 0;
 350:	10 92 01 06 	sts	0x0601, r1
 354:	10 92 00 06 	sts	0x0600, r1
 358:	8f ec       	ldi	r24, 0xCF	; 207
 35a:	97 e0       	ldi	r25, 0x07	; 7
 35c:	01 97       	sbiw	r24, 0x01	; 1
 35e:	f1 f7       	brne	.-4      	; 0x35c <opgaveextra+0xa0>
 360:	00 c0       	rjmp	.+0      	; 0x362 <opgaveextra+0xa6>
 362:	00 00       	nop
		}

		_delay_ms(1);

		PORTB = 0x00000000;
 364:	18 ba       	out	0x18, r1	; 24

		count++;
 366:	80 91 02 06 	lds	r24, 0x0602
 36a:	90 91 03 06 	lds	r25, 0x0603
 36e:	01 96       	adiw	r24, 0x01	; 1
 370:	90 93 03 06 	sts	0x0603, r25
 374:	80 93 02 06 	sts	0x0602, r24
	}
 378:	c5 cf       	rjmp	.-118    	; 0x304 <opgaveextra+0x48>

0000037a <main>:

	//opgave2knop();

	//opgave3();

	opgaveextra();
 37a:	a0 df       	rcall	.-192    	; 0x2bc <opgaveextra>

0000037c <__umulhisi3>:
 37c:	a2 9f       	mul	r26, r18
 37e:	b0 01       	movw	r22, r0
 380:	b3 9f       	mul	r27, r19
 382:	c0 01       	movw	r24, r0
 384:	a3 9f       	mul	r26, r19
 386:	70 0d       	add	r23, r0
 388:	81 1d       	adc	r24, r1
 38a:	11 24       	eor	r1, r1
 38c:	91 1d       	adc	r25, r1
 38e:	b2 9f       	mul	r27, r18
 390:	70 0d       	add	r23, r0
 392:	81 1d       	adc	r24, r1
 394:	11 24       	eor	r1, r1
 396:	91 1d       	adc	r25, r1
 398:	08 95       	ret

0000039a <_exit>:
 39a:	f8 94       	cli

0000039c <__stop_program>:
 39c:	ff cf       	rjmp	.-2      	; 0x39c <__stop_program>
