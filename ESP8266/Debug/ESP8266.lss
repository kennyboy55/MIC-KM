
ESP8266.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000338  000003ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000338  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003b6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  00000424  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b9d  00000000  00000000  00000504  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000055f  00000000  00000000  000010a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000651  00000000  00000000  00001600  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001a0  00000000  00000000  00001c54  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000286  00000000  00000000  00001df4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000590  00000000  00000000  0000207a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  0000260a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e3       	ldi	r30, 0x38	; 56
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 30       	cpi	r26, 0x0A	; 10
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	d0 d0       	rcall	.+416    	; 0x254 <main>
  b4:	3f c1       	rjmp	.+638    	; 0x334 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <esp_init>:

 #include "uart.h"

 void esp_init()
 {
	uart_init(9600);
  b8:	80 e8       	ldi	r24, 0x80	; 128
  ba:	95 e2       	ldi	r25, 0x25	; 37
  bc:	e4 d0       	rcall	.+456    	; 0x286 <uart_init>

	wait(50);
  be:	82 e3       	ldi	r24, 0x32	; 50
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	b7 d0       	rcall	.+366    	; 0x232 <wait>

	uart_start();
  c4:	f3 d0       	rcall	.+486    	; 0x2ac <uart_start>

	wait(10);
  c6:	8a e0       	ldi	r24, 0x0A	; 10
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	b3 c0       	rjmp	.+358    	; 0x232 <wait>
  cc:	08 95       	ret

000000ce <display_char>:
	 }
 }

 void display_char( unsigned char dat )
 {
	 PORTC = dat & 0xF0; // hoge nibble
  ce:	98 2f       	mov	r25, r24
  d0:	90 7f       	andi	r25, 0xF0	; 240
  d2:	95 bb       	out	0x15, r25	; 21
	 PORTC = PORTC | 0x0C; // Enable on (EN = 1, RS=1),
  d4:	95 b3       	in	r25, 0x15	; 21
  d6:	9c 60       	ori	r25, 0x0C	; 12
  d8:	95 bb       	out	0x15, r25	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  da:	ef ec       	ldi	r30, 0xCF	; 207
  dc:	f7 e0       	ldi	r31, 0x07	; 7
  de:	31 97       	sbiw	r30, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <display_char+0x10>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <display_char+0x16>
  e4:	00 00       	nop
	 _delay_ms(1); // wait 1 ms
	 PORTC = 0x04; // Enable off (EN = 0, RS = 1)
  e6:	94 e0       	ldi	r25, 0x04	; 4
  e8:	95 bb       	out	0x15, r25	; 21
  ea:	ef ec       	ldi	r30, 0xCF	; 207
  ec:	f7 e0       	ldi	r31, 0x07	; 7
  ee:	31 97       	sbiw	r30, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <display_char+0x20>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <display_char+0x26>
  f4:	00 00       	nop

	 _delay_ms(1); // wait 1 ms

	 PORTC = (dat & 0x0F) << 4; // lage nibble
  f6:	f0 e1       	ldi	r31, 0x10	; 16
  f8:	8f 9f       	mul	r24, r31
  fa:	c0 01       	movw	r24, r0
  fc:	11 24       	eor	r1, r1
  fe:	85 bb       	out	0x15, r24	; 21
	 PORTC = PORTC | 0x0C; // Enable on (RS=1),
 100:	85 b3       	in	r24, 0x15	; 21
 102:	8c 60       	ori	r24, 0x0C	; 12
 104:	85 bb       	out	0x15, r24	; 21
 106:	8f ec       	ldi	r24, 0xCF	; 207
 108:	97 e0       	ldi	r25, 0x07	; 7
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <display_char+0x3c>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <display_char+0x42>
 110:	00 00       	nop
	 // start (EN=1)
	 _delay_ms(1); // wait 1 ms
	 PORTC = 0x00; // stop
 112:	15 ba       	out	0x15, r1	; 21
 114:	08 95       	ret

00000116 <lcd_command>:
	 // (EN=0 RS=0)
 }

 void lcd_command ( unsigned char dat )
 {
	 PORTC = dat & 0xF0; // hoge nibble
 116:	98 2f       	mov	r25, r24
 118:	90 7f       	andi	r25, 0xF0	; 240
 11a:	95 bb       	out	0x15, r25	; 21
	 PORTC = PORTC | 0x08; // data (RS=0),
 11c:	ab 9a       	sbi	0x15, 3	; 21
 11e:	ef e9       	ldi	r30, 0x9F	; 159
 120:	ff e0       	ldi	r31, 0x0F	; 15
 122:	31 97       	sbiw	r30, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <lcd_command+0xc>
 126:	00 c0       	rjmp	.+0      	; 0x128 <lcd_command+0x12>
 128:	00 00       	nop
	 // start (EN=1)
	 _delay_ms(2); // wait 1 ms
	 PORTC = 0x04; // stop (EN = 0)
 12a:	94 e0       	ldi	r25, 0x04	; 4
 12c:	95 bb       	out	0x15, r25	; 21
 12e:	ef e9       	ldi	r30, 0x9F	; 159
 130:	ff e0       	ldi	r31, 0x0F	; 15
 132:	31 97       	sbiw	r30, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <lcd_command+0x1c>
 136:	00 c0       	rjmp	.+0      	; 0x138 <lcd_command+0x22>
 138:	00 00       	nop

	 _delay_ms(2); // wait 1 ms

	 PORTC = (dat & 0x0F) << 4; // lage nibble
 13a:	f0 e1       	ldi	r31, 0x10	; 16
 13c:	8f 9f       	mul	r24, r31
 13e:	c0 01       	movw	r24, r0
 140:	11 24       	eor	r1, r1
 142:	85 bb       	out	0x15, r24	; 21
	 PORTC = PORTC | 0x08; // data (RS=0),
 144:	ab 9a       	sbi	0x15, 3	; 21
 146:	8f e9       	ldi	r24, 0x9F	; 159
 148:	9f e0       	ldi	r25, 0x0F	; 15
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <lcd_command+0x34>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <lcd_command+0x3a>
 150:	00 00       	nop
	 // start (EN=1)
	 _delay_ms(2); // wait 1 ms
	 PORTC = 0x00; // stop
 152:	15 ba       	out	0x15, r1	; 21
 154:	08 95       	ret

00000156 <display_text>:

 	_delay_ms(100);
 }

void display_text( int line, char *text, int start )
{
 156:	0f 93       	push	r16
 158:	1f 93       	push	r17
 15a:	cf 93       	push	r28
 15c:	df 93       	push	r29
 15e:	eb 01       	movw	r28, r22
 160:	8a 01       	movw	r16, r20
	// eerst de eerste 8 karakters = regel 1

	if(line)
 162:	89 2b       	or	r24, r25
 164:	49 f0       	breq	.+18     	; 0x178 <display_text+0x22>
	{
		// eerste pos regel 1
		lcd_command(0xC0);
 166:	80 ec       	ldi	r24, 0xC0	; 192
 168:	d6 df       	rcall	.-84     	; 0x116 <lcd_command>
		lcd_command(0x80);
	}

	int count = start;

	while (text[count] != '\0') {
 16a:	fe 01       	movw	r30, r28
 16c:	e0 0f       	add	r30, r16
 16e:	f1 1f       	adc	r31, r17
 170:	80 81       	ld	r24, Z
 172:	81 11       	cpse	r24, r1
 174:	04 c0       	rjmp	.+8      	; 0x17e <display_text+0x28>
 176:	11 c0       	rjmp	.+34     	; 0x19a <display_text+0x44>
		lcd_command(0xC0);
	}
	else
	{
		// regel 0
		lcd_command(0x80);
 178:	80 e8       	ldi	r24, 0x80	; 128
 17a:	cd df       	rcall	.-102    	; 0x116 <lcd_command>
 17c:	f6 cf       	rjmp	.-20     	; 0x16a <display_text+0x14>
 17e:	0f 5f       	subi	r16, 0xFF	; 255
 180:	1f 4f       	sbci	r17, 0xFF	; 255
 182:	c0 0f       	add	r28, r16
 184:	d1 1f       	adc	r29, r17
	}

	int count = start;

	while (text[count] != '\0') {
		display_char( text[count] );
 186:	a3 df       	rcall	.-186    	; 0xce <display_char>
 188:	8f ec       	ldi	r24, 0xCF	; 207
 18a:	97 e0       	ldi	r25, 0x07	; 7
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <display_text+0x36>
 190:	00 c0       	rjmp	.+0      	; 0x192 <display_text+0x3c>
 192:	00 00       	nop
		lcd_command(0x80);
	}

	int count = start;

	while (text[count] != '\0') {
 194:	89 91       	ld	r24, Y+
 196:	81 11       	cpse	r24, r1
 198:	f6 cf       	rjmp	.-20     	; 0x186 <display_text+0x30>
		display_char( text[count] );
		count++;

		_delay_ms(1);
	}
}
 19a:	df 91       	pop	r29
 19c:	cf 91       	pop	r28
 19e:	1f 91       	pop	r17
 1a0:	0f 91       	pop	r16
 1a2:	08 95       	ret

000001a4 <clear_display>:

void clear_display()
{
	lcd_command(0b00000001);
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	b7 df       	rcall	.-146    	; 0x116 <lcd_command>
	lcd_command(0b10000000);
 1a8:	80 e8       	ldi	r24, 0x80	; 128
 1aa:	b5 cf       	rjmp	.-150    	; 0x116 <lcd_command>
 1ac:	08 95       	ret

000001ae <lcd_init>:
 void display_char(unsigned char dat);
 void lcd_command(unsigned char dat);

 void lcd_init()
 {
 	DDRC = 0b11111111;
 1ae:	8f ef       	ldi	r24, 0xFF	; 255
 1b0:	84 bb       	out	0x14, r24	; 20
 1b2:	2f ef       	ldi	r18, 0xFF	; 255
 1b4:	80 e7       	ldi	r24, 0x70	; 112
 1b6:	92 e0       	ldi	r25, 0x02	; 2
 1b8:	21 50       	subi	r18, 0x01	; 1
 1ba:	80 40       	sbci	r24, 0x00	; 0
 1bc:	90 40       	sbci	r25, 0x00	; 0
 1be:	e1 f7       	brne	.-8      	; 0x1b8 <lcd_init+0xa>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <lcd_init+0x14>
 1c2:	00 00       	nop

 	_delay_ms(100);

 	// return home
 	lcd_command( 0x02 );
 1c4:	82 e0       	ldi	r24, 0x02	; 2
 1c6:	a7 df       	rcall	.-178    	; 0x116 <lcd_command>
 1c8:	2f e7       	ldi	r18, 0x7F	; 127
 1ca:	88 e3       	ldi	r24, 0x38	; 56
 1cc:	91 e0       	ldi	r25, 0x01	; 1
 1ce:	21 50       	subi	r18, 0x01	; 1
 1d0:	80 40       	sbci	r24, 0x00	; 0
 1d2:	90 40       	sbci	r25, 0x00	; 0
 1d4:	e1 f7       	brne	.-8      	; 0x1ce <lcd_init+0x20>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <lcd_init+0x2a>
 1d8:	00 00       	nop
 	// mode: 4 bits interface data, 2 lines, 5x8 dots
 	_delay_ms(50);
 	lcd_command( 0x28 );
 1da:	88 e2       	ldi	r24, 0x28	; 40
 1dc:	9c df       	rcall	.-200    	; 0x116 <lcd_command>
 1de:	2f e7       	ldi	r18, 0x7F	; 127
 1e0:	88 e3       	ldi	r24, 0x38	; 56
 1e2:	91 e0       	ldi	r25, 0x01	; 1
 1e4:	21 50       	subi	r18, 0x01	; 1
 1e6:	80 40       	sbci	r24, 0x00	; 0
 1e8:	90 40       	sbci	r25, 0x00	; 0
 1ea:	e1 f7       	brne	.-8      	; 0x1e4 <lcd_init+0x36>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <lcd_init+0x40>
 1ee:	00 00       	nop
 	// display: on, cursor off, blinking off
 	_delay_ms(50);
 	lcd_command( 0x0C );
 1f0:	8c e0       	ldi	r24, 0x0C	; 12
 1f2:	91 df       	rcall	.-222    	; 0x116 <lcd_command>
 1f4:	2f e7       	ldi	r18, 0x7F	; 127
 1f6:	88 e3       	ldi	r24, 0x38	; 56
 1f8:	91 e0       	ldi	r25, 0x01	; 1
 1fa:	21 50       	subi	r18, 0x01	; 1
 1fc:	80 40       	sbci	r24, 0x00	; 0
 1fe:	90 40       	sbci	r25, 0x00	; 0
 200:	e1 f7       	brne	.-8      	; 0x1fa <lcd_init+0x4c>
 202:	00 c0       	rjmp	.+0      	; 0x204 <lcd_init+0x56>
 204:	00 00       	nop
 	// entry mode: cursor to right, no shift
 	_delay_ms(50);
 	lcd_command( 0x06 );
 206:	86 e0       	ldi	r24, 0x06	; 6
 208:	86 df       	rcall	.-244    	; 0x116 <lcd_command>
 20a:	2f e7       	ldi	r18, 0x7F	; 127
 20c:	88 e3       	ldi	r24, 0x38	; 56
 20e:	91 e0       	ldi	r25, 0x01	; 1
 210:	21 50       	subi	r18, 0x01	; 1
 212:	80 40       	sbci	r24, 0x00	; 0
 214:	90 40       	sbci	r25, 0x00	; 0
 216:	e1 f7       	brne	.-8      	; 0x210 <lcd_init+0x62>
 218:	00 c0       	rjmp	.+0      	; 0x21a <lcd_init+0x6c>
 21a:	00 00       	nop
 	// RAM address: 0, first position, line 1
 	_delay_ms(50);
 	clear_display();
 21c:	c3 df       	rcall	.-122    	; 0x1a4 <clear_display>
 21e:	2f ef       	ldi	r18, 0xFF	; 255
 220:	80 e7       	ldi	r24, 0x70	; 112
 222:	92 e0       	ldi	r25, 0x02	; 2
 224:	21 50       	subi	r18, 0x01	; 1
 226:	80 40       	sbci	r24, 0x00	; 0
 228:	90 40       	sbci	r25, 0x00	; 0
 22a:	e1 f7       	brne	.-8      	; 0x224 <lcd_init+0x76>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <lcd_init+0x80>
 22e:	00 00       	nop
 230:	08 95       	ret

00000232 <wait>:
#include "esp.h"


void wait( int ms )
{
	for (int tms=0; tms<ms; tms++)
 232:	18 16       	cp	r1, r24
 234:	19 06       	cpc	r1, r25
 236:	6c f4       	brge	.+26     	; 0x252 <wait+0x20>
 238:	20 e0       	ldi	r18, 0x00	; 0
 23a:	30 e0       	ldi	r19, 0x00	; 0
 23c:	ef ec       	ldi	r30, 0xCF	; 207
 23e:	f7 e0       	ldi	r31, 0x07	; 7
 240:	31 97       	sbiw	r30, 0x01	; 1
 242:	f1 f7       	brne	.-4      	; 0x240 <wait+0xe>
 244:	00 c0       	rjmp	.+0      	; 0x246 <wait+0x14>
 246:	00 00       	nop
 248:	2f 5f       	subi	r18, 0xFF	; 255
 24a:	3f 4f       	sbci	r19, 0xFF	; 255
 24c:	28 17       	cp	r18, r24
 24e:	39 07       	cpc	r19, r25
 250:	a9 f7       	brne	.-22     	; 0x23c <wait+0xa>
 252:	08 95       	ret

00000254 <main>:
	}
}

int main(void)
{
	esp_init();
 254:	31 df       	rcall	.-414    	; 0xb8 <esp_init>

	wait(50);
 256:	82 e3       	ldi	r24, 0x32	; 50
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	eb df       	rcall	.-42     	; 0x232 <wait>

	lcd_init();
 25c:	a8 df       	rcall	.-176    	; 0x1ae <lcd_init>

	display_text(0,"Ready", 0);
 25e:	40 e0       	ldi	r20, 0x00	; 0
 260:	50 e0       	ldi	r21, 0x00	; 0
 262:	64 e0       	ldi	r22, 0x04	; 4
 264:	71 e0       	ldi	r23, 0x01	; 1
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	75 df       	rcall	.-278    	; 0x156 <display_text>

	wait(150);
 26c:	86 e9       	ldi	r24, 0x96	; 150
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	e0 df       	rcall	.-64     	; 0x232 <wait>

	clear_display();
 272:	98 df       	rcall	.-208    	; 0x1a4 <clear_display>

    /* Replace with your application code */
    while (1) 
    {
		wait(1000);							// every 50 ms (busy waiting)
 274:	88 ee       	ldi	r24, 0xE8	; 232
 276:	93 e0       	ldi	r25, 0x03	; 3
 278:	dc df       	rcall	.-72     	; 0x232 <wait>

		uart_sendString("AT\0");
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	91 e0       	ldi	r25, 0x01	; 1
 27e:	24 d0       	rcall	.+72     	; 0x2c8 <uart_sendString>

		char c = uart_receiveChar();		// receive string from uart
 280:	1f d0       	rcall	.+62     	; 0x2c0 <uart_receiveChar>
		
		display_char(c);
 282:	25 df       	rcall	.-438    	; 0xce <display_char>
    }
 284:	f7 cf       	rjmp	.-18     	; 0x274 <main+0x20>

00000286 <uart_init>:
		else
			*string++ = ch; // else fill buffer
	}
	*string = '\0'; // string terminator
	return 0;
}
 286:	9c 01       	movw	r18, r24
 288:	99 0f       	add	r25, r25
 28a:	44 0b       	sbc	r20, r20
 28c:	55 0b       	sbc	r21, r21
 28e:	60 e2       	ldi	r22, 0x20	; 32
 290:	71 ea       	ldi	r23, 0xA1	; 161
 292:	87 e0       	ldi	r24, 0x07	; 7
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	2c d0       	rcall	.+88     	; 0x2f0 <__udivmodsi4>
 298:	21 50       	subi	r18, 0x01	; 1
 29a:	31 09       	sbc	r19, r1
 29c:	30 93 90 00 	sts	0x0090, r19
 2a0:	29 b9       	out	0x09, r18	; 9
 2a2:	86 e0       	ldi	r24, 0x06	; 6
 2a4:	80 93 95 00 	sts	0x0095, r24
 2a8:	1a b8       	out	0x0a, r1	; 10
 2aa:	08 95       	ret

000002ac <uart_start>:
 2ac:	8a b1       	in	r24, 0x0a	; 10
 2ae:	88 61       	ori	r24, 0x18	; 24
 2b0:	8a b9       	out	0x0a, r24	; 10
 2b2:	08 95       	ret

000002b4 <uart_sendChar>:
 2b4:	5d 9b       	sbis	0x0b, 5	; 11
 2b6:	fe cf       	rjmp	.-4      	; 0x2b4 <uart_sendChar>
 2b8:	8c b9       	out	0x0c, r24	; 12
 2ba:	80 e0       	ldi	r24, 0x00	; 0
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	08 95       	ret

000002c0 <uart_receiveChar>:
 2c0:	5f 9b       	sbis	0x0b, 7	; 11
 2c2:	fe cf       	rjmp	.-4      	; 0x2c0 <uart_receiveChar>
 2c4:	8c b1       	in	r24, 0x0c	; 12
 2c6:	08 95       	ret

000002c8 <uart_sendString>:

int uart_sendString( char* string)
{
 2c8:	cf 93       	push	r28
 2ca:	df 93       	push	r29
 2cc:	ec 01       	movw	r28, r24
	int count = 0;

	while (string[count] != '\0') // while contunie
 2ce:	88 81       	ld	r24, Y
 2d0:	88 23       	and	r24, r24
 2d2:	29 f0       	breq	.+10     	; 0x2de <uart_sendString+0x16>
 2d4:	21 96       	adiw	r28, 0x01	; 1
	{
		uart_sendChar(string[count]);
 2d6:	ee df       	rcall	.-36     	; 0x2b4 <uart_sendChar>

int uart_sendString( char* string)
{
	int count = 0;

	while (string[count] != '\0') // while contunie
 2d8:	89 91       	ld	r24, Y+
 2da:	81 11       	cpse	r24, r1
 2dc:	fc cf       	rjmp	.-8      	; 0x2d6 <uart_sendString+0xe>
	{
		uart_sendChar(string[count]);
		count++;
	}

	uart_sendChar(CR);
 2de:	8d e0       	ldi	r24, 0x0D	; 13
 2e0:	e9 df       	rcall	.-46     	; 0x2b4 <uart_sendChar>
	uart_sendChar(LF);
 2e2:	8a e0       	ldi	r24, 0x0A	; 10
 2e4:	e7 df       	rcall	.-50     	; 0x2b4 <uart_sendChar>
	
	return 0;
 2e6:	80 e0       	ldi	r24, 0x00	; 0
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	df 91       	pop	r29
 2ec:	cf 91       	pop	r28
 2ee:	08 95       	ret

000002f0 <__udivmodsi4>:
 2f0:	a1 e2       	ldi	r26, 0x21	; 33
 2f2:	1a 2e       	mov	r1, r26
 2f4:	aa 1b       	sub	r26, r26
 2f6:	bb 1b       	sub	r27, r27
 2f8:	fd 01       	movw	r30, r26
 2fa:	0d c0       	rjmp	.+26     	; 0x316 <__udivmodsi4_ep>

000002fc <__udivmodsi4_loop>:
 2fc:	aa 1f       	adc	r26, r26
 2fe:	bb 1f       	adc	r27, r27
 300:	ee 1f       	adc	r30, r30
 302:	ff 1f       	adc	r31, r31
 304:	a2 17       	cp	r26, r18
 306:	b3 07       	cpc	r27, r19
 308:	e4 07       	cpc	r30, r20
 30a:	f5 07       	cpc	r31, r21
 30c:	20 f0       	brcs	.+8      	; 0x316 <__udivmodsi4_ep>
 30e:	a2 1b       	sub	r26, r18
 310:	b3 0b       	sbc	r27, r19
 312:	e4 0b       	sbc	r30, r20
 314:	f5 0b       	sbc	r31, r21

00000316 <__udivmodsi4_ep>:
 316:	66 1f       	adc	r22, r22
 318:	77 1f       	adc	r23, r23
 31a:	88 1f       	adc	r24, r24
 31c:	99 1f       	adc	r25, r25
 31e:	1a 94       	dec	r1
 320:	69 f7       	brne	.-38     	; 0x2fc <__udivmodsi4_loop>
 322:	60 95       	com	r22
 324:	70 95       	com	r23
 326:	80 95       	com	r24
 328:	90 95       	com	r25
 32a:	9b 01       	movw	r18, r22
 32c:	ac 01       	movw	r20, r24
 32e:	bd 01       	movw	r22, r26
 330:	cf 01       	movw	r24, r30
 332:	08 95       	ret

00000334 <_exit>:
 334:	f8 94       	cli

00000336 <__stop_program>:
 336:	ff cf       	rjmp	.-2      	; 0x336 <__stop_program>
