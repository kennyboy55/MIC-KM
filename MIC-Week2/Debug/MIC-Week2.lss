
MIC-Week2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000023c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000002b0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000004e3  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000277  00000000  00000000  00000877  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000392  00000000  00000000  00000aee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000184  00000000  00000000  00000e80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000218  00000000  00000000  00001004  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003ae  00000000  00000000  0000121c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  000015ca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	72 c0       	rjmp	.+228    	; 0xea <__vector_1>
   6:	00 00       	nop
   8:	bb c0       	rjmp	.+374    	; 0x180 <__vector_2>
   a:	00 00       	nop
   c:	ec c0       	rjmp	.+472    	; 0x1e6 <__vector_3>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	75 c0       	rjmp	.+234    	; 0x100 <__vector_5>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e3       	ldi	r30, 0x3C	; 60
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 30       	cpi	r26, 0x02	; 2
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	49 d0       	rcall	.+146    	; 0x156 <main>
  c4:	b9 c0       	rjmp	.+370    	; 0x238 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <wait>:

	while (1)
	{
		PORTD ^= (1<<7);	// Toggle PORTD.7
		wait( 500 );
	}
  c8:	18 16       	cp	r1, r24
  ca:	19 06       	cpc	r1, r25
  cc:	6c f4       	brge	.+26     	; 0xe8 <wait+0x20>
  ce:	20 e0       	ldi	r18, 0x00	; 0
  d0:	30 e0       	ldi	r19, 0x00	; 0
  d2:	ef ec       	ldi	r30, 0xCF	; 207
  d4:	f7 e0       	ldi	r31, 0x07	; 7
  d6:	31 97       	sbiw	r30, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <wait+0xe>
  da:	00 c0       	rjmp	.+0      	; 0xdc <wait+0x14>
  dc:	00 00       	nop
  de:	2f 5f       	subi	r18, 0xFF	; 255
  e0:	3f 4f       	sbci	r19, 0xFF	; 255
  e2:	28 17       	cp	r18, r24
  e4:	39 07       	cpc	r19, r25
  e6:	a9 f7       	brne	.-22     	; 0xd2 <wait+0xa>
  e8:	08 95       	ret

000000ea <__vector_1>:
  ea:	1f 92       	push	r1
  ec:	0f 92       	push	r0
  ee:	0f b6       	in	r0, 0x3f	; 63
  f0:	0f 92       	push	r0
  f2:	11 24       	eor	r1, r1
  f4:	95 9a       	sbi	0x12, 5	; 18
  f6:	0f 90       	pop	r0
  f8:	0f be       	out	0x3f, r0	; 63
  fa:	0f 90       	pop	r0
  fc:	1f 90       	pop	r1
  fe:	18 95       	reti

00000100 <__vector_5>:
 100:	1f 92       	push	r1
 102:	0f 92       	push	r0
 104:	0f b6       	in	r0, 0x3f	; 63
 106:	0f 92       	push	r0
 108:	11 24       	eor	r1, r1
 10a:	8f 93       	push	r24
 10c:	9f 93       	push	r25
 10e:	93 b1       	in	r25, 0x03	; 3
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	89 27       	eor	r24, r25
 114:	83 b9       	out	0x03, r24	; 3
 116:	9f 91       	pop	r25
 118:	8f 91       	pop	r24
 11a:	0f 90       	pop	r0
 11c:	0f be       	out	0x3f, r0	; 63
 11e:	0f 90       	pop	r0
 120:	1f 90       	pop	r1
 122:	18 95       	reti

00000124 <opgave2>:
}

void opgave2(void)
{
	DDRD = 0xF0;	//PORTD(7:4) output, PORTD(3:0) input
 124:	80 ef       	ldi	r24, 0xF0	; 240
 126:	81 bb       	out	0x11, r24	; 17
	DDRC = 0xFF;	//PORTC(7:0) output;
 128:	8f ef       	ldi	r24, 0xFF	; 255
 12a:	84 bb       	out	0x14, r24	; 20
	PORTC= 0x1;
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	85 bb       	out	0x15, r24	; 21

	EICRA |= 0x28;		//INT1 en INT2 falling edge 
 130:	ea e6       	ldi	r30, 0x6A	; 106
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	88 62       	ori	r24, 0x28	; 40
 138:	80 83       	st	Z, r24
	EIMSK |= 0x06;
 13a:	89 b7       	in	r24, 0x39	; 57
 13c:	86 60       	ori	r24, 0x06	; 6
 13e:	89 bf       	out	0x39, r24	; 57
	opdr=1;
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	90 93 01 01 	sts	0x0101, r25
 148:	80 93 00 01 	sts	0x0100, r24
	sei();
 14c:	78 94       	sei

	while(1)
	{
		wait(500);
 14e:	84 ef       	ldi	r24, 0xF4	; 244
 150:	91 e0       	ldi	r25, 0x01	; 1
 152:	ba df       	rcall	.-140    	; 0xc8 <wait>
	}
 154:	fc cf       	rjmp	.-8      	; 0x14e <opgave2+0x2a>

00000156 <main>:
notes:			Slow background task after init ISR
Version :    	DMK, Initial code
*******************************************************************/
{
	//powerpointOpg();
	opgave2();
 156:	e6 df       	rcall	.-52     	; 0x124 <opgave2>

00000158 <shift>:
}

void shift(int i)
{

	if(i)
 158:	89 2b       	or	r24, r25
 15a:	21 f0       	breq	.+8      	; 0x164 <shift+0xc>
		PORTC = (PORTC>>1);
 15c:	85 b3       	in	r24, 0x15	; 21
 15e:	86 95       	lsr	r24
 160:	85 bb       	out	0x15, r24	; 21
 162:	03 c0       	rjmp	.+6      	; 0x16a <shift+0x12>
	else
		PORTC = (PORTC<<1);
 164:	85 b3       	in	r24, 0x15	; 21
 166:	88 0f       	add	r24, r24
 168:	85 bb       	out	0x15, r24	; 21
		
	//Als het looplicht aan het einde is
	if (PORTC >= 0x80)
 16a:	af 9b       	sbis	0x15, 7	; 21
 16c:	03 c0       	rjmp	.+6      	; 0x174 <shift+0x1c>
	{
		PORTC= 0x01;
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	85 bb       	out	0x15, r24	; 21
 172:	08 95       	ret
	}
	//Als het looplicht aan het begin is
	else if (PORTC < 0x1)
 174:	85 b3       	in	r24, 0x15	; 21
 176:	81 11       	cpse	r24, r1
 178:	02 c0       	rjmp	.+4      	; 0x17e <shift+0x26>
	{
		PORTC= 0x80;
 17a:	80 e8       	ldi	r24, 0x80	; 128
 17c:	85 bb       	out	0x15, r24	; 21
 17e:	08 95       	ret

00000180 <__vector_2>:
    PORTD |= (1<<5);		
}

/******************************************************************/
ISR( INT1_vect )
{ 
 180:	1f 92       	push	r1
 182:	0f 92       	push	r0
 184:	0f b6       	in	r0, 0x3f	; 63
 186:	0f 92       	push	r0
 188:	11 24       	eor	r1, r1
 18a:	0b b6       	in	r0, 0x3b	; 59
 18c:	0f 92       	push	r0
 18e:	2f 93       	push	r18
 190:	3f 93       	push	r19
 192:	4f 93       	push	r20
 194:	5f 93       	push	r21
 196:	6f 93       	push	r22
 198:	7f 93       	push	r23
 19a:	8f 93       	push	r24
 19c:	9f 93       	push	r25
 19e:	af 93       	push	r26
 1a0:	bf 93       	push	r27
 1a2:	ef 93       	push	r30
 1a4:	ff 93       	push	r31
inputs:			
outputs:	
notes:			Clear PORTD.5
Version :    	DMK, Initial code
*******************************************************************/
	if(opdr==0)
 1a6:	80 91 00 01 	lds	r24, 0x0100
 1aa:	90 91 01 01 	lds	r25, 0x0101
 1ae:	00 97       	sbiw	r24, 0x00	; 0
 1b0:	11 f4       	brne	.+4      	; 0x1b6 <__vector_2+0x36>
	{
		PORTD &= ~(1<<5);		
 1b2:	95 98       	cbi	0x12, 5	; 18
 1b4:	05 c0       	rjmp	.+10     	; 0x1c0 <__vector_2+0x40>
	}
	else if(opdr==1)
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	19 f4       	brne	.+6      	; 0x1c0 <__vector_2+0x40>
	{
		shift(1);
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	cc df       	rcall	.-104    	; 0x158 <shift>
	}
}
 1c0:	ff 91       	pop	r31
 1c2:	ef 91       	pop	r30
 1c4:	bf 91       	pop	r27
 1c6:	af 91       	pop	r26
 1c8:	9f 91       	pop	r25
 1ca:	8f 91       	pop	r24
 1cc:	7f 91       	pop	r23
 1ce:	6f 91       	pop	r22
 1d0:	5f 91       	pop	r21
 1d2:	4f 91       	pop	r20
 1d4:	3f 91       	pop	r19
 1d6:	2f 91       	pop	r18
 1d8:	0f 90       	pop	r0
 1da:	0b be       	out	0x3b, r0	; 59
 1dc:	0f 90       	pop	r0
 1de:	0f be       	out	0x3f, r0	; 63
 1e0:	0f 90       	pop	r0
 1e2:	1f 90       	pop	r1
 1e4:	18 95       	reti

000001e6 <__vector_3>:
inputs:
outputs:
notes:			Clear PORTD.3
Version :    	DMK, Initial code
*******************************************************************/
{
 1e6:	1f 92       	push	r1
 1e8:	0f 92       	push	r0
 1ea:	0f b6       	in	r0, 0x3f	; 63
 1ec:	0f 92       	push	r0
 1ee:	11 24       	eor	r1, r1
 1f0:	0b b6       	in	r0, 0x3b	; 59
 1f2:	0f 92       	push	r0
 1f4:	2f 93       	push	r18
 1f6:	3f 93       	push	r19
 1f8:	4f 93       	push	r20
 1fa:	5f 93       	push	r21
 1fc:	6f 93       	push	r22
 1fe:	7f 93       	push	r23
 200:	8f 93       	push	r24
 202:	9f 93       	push	r25
 204:	af 93       	push	r26
 206:	bf 93       	push	r27
 208:	ef 93       	push	r30
 20a:	ff 93       	push	r31
	shift(0);
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	a3 df       	rcall	.-186    	; 0x158 <shift>
}
 212:	ff 91       	pop	r31
 214:	ef 91       	pop	r30
 216:	bf 91       	pop	r27
 218:	af 91       	pop	r26
 21a:	9f 91       	pop	r25
 21c:	8f 91       	pop	r24
 21e:	7f 91       	pop	r23
 220:	6f 91       	pop	r22
 222:	5f 91       	pop	r21
 224:	4f 91       	pop	r20
 226:	3f 91       	pop	r19
 228:	2f 91       	pop	r18
 22a:	0f 90       	pop	r0
 22c:	0b be       	out	0x3b, r0	; 59
 22e:	0f 90       	pop	r0
 230:	0f be       	out	0x3f, r0	; 63
 232:	0f 90       	pop	r0
 234:	1f 90       	pop	r1
 236:	18 95       	reti

00000238 <_exit>:
 238:	f8 94       	cli

0000023a <__stop_program>:
 23a:	ff cf       	rjmp	.-2      	; 0x23a <__stop_program>
