
MIC-Week2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006c  00800100  00000294  00000328  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000294  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080016c  0080016c  00000394  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000043b  00000000  00000000  00000478  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000021d  00000000  00000000  000008b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000374  00000000  00000000  00000ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000184  00000000  00000000  00000e44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000218  00000000  00000000  00000fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003c9  00000000  00000000  000011e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  000015a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	72 c0       	rjmp	.+228    	; 0xea <__vector_1>
   6:	00 00       	nop
   8:	a1 c0       	rjmp	.+322    	; 0x14c <__vector_2>
   a:	00 00       	nop
   c:	d2 c0       	rjmp	.+420    	; 0x1b2 <__vector_3>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	75 c0       	rjmp	.+234    	; 0x100 <__vector_5>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e9       	ldi	r30, 0x94	; 148
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 36       	cpi	r26, 0x6C	; 108
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e6       	ldi	r26, 0x6C	; 108
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 37       	cpi	r26, 0x70	; 112
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	e5 d0       	rcall	.+458    	; 0x28e <main>
  c4:	e5 c0       	rjmp	.+458    	; 0x290 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <wait>:
		{
			count = ((count-1 < 0) ? -1 : count-1);
		}

		display(count, 0);
	}
  c8:	18 16       	cp	r1, r24
  ca:	19 06       	cpc	r1, r25
  cc:	6c f4       	brge	.+26     	; 0xe8 <wait+0x20>
  ce:	20 e0       	ldi	r18, 0x00	; 0
  d0:	30 e0       	ldi	r19, 0x00	; 0
  d2:	ef ec       	ldi	r30, 0xCF	; 207
  d4:	f7 e0       	ldi	r31, 0x07	; 7
  d6:	31 97       	sbiw	r30, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <wait+0xe>
  da:	00 c0       	rjmp	.+0      	; 0xdc <wait+0x14>
  dc:	00 00       	nop
  de:	2f 5f       	subi	r18, 0xFF	; 255
  e0:	3f 4f       	sbci	r19, 0xFF	; 255
  e2:	28 17       	cp	r18, r24
  e4:	39 07       	cpc	r19, r25
  e6:	a9 f7       	brne	.-22     	; 0xd2 <wait+0xa>
  e8:	08 95       	ret

000000ea <__vector_1>:
  ea:	1f 92       	push	r1
  ec:	0f 92       	push	r0
  ee:	0f b6       	in	r0, 0x3f	; 63
  f0:	0f 92       	push	r0
  f2:	11 24       	eor	r1, r1
  f4:	95 9a       	sbi	0x12, 5	; 18
  f6:	0f 90       	pop	r0
  f8:	0f be       	out	0x3f, r0	; 63
  fa:	0f 90       	pop	r0
  fc:	1f 90       	pop	r1
  fe:	18 95       	reti

00000100 <__vector_5>:
 100:	1f 92       	push	r1
 102:	0f 92       	push	r0
 104:	0f b6       	in	r0, 0x3f	; 63
 106:	0f 92       	push	r0
 108:	11 24       	eor	r1, r1
 10a:	8f 93       	push	r24
 10c:	9f 93       	push	r25
 10e:	93 b1       	in	r25, 0x03	; 3
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	89 27       	eor	r24, r25
 114:	83 b9       	out	0x03, r24	; 3
 116:	9f 91       	pop	r25
 118:	8f 91       	pop	r24
 11a:	0f 90       	pop	r0
 11c:	0f be       	out	0x3f, r0	; 63
 11e:	0f 90       	pop	r0
 120:	1f 90       	pop	r1
 122:	18 95       	reti

00000124 <shift>:
 124:	89 2b       	or	r24, r25
 126:	21 f0       	breq	.+8      	; 0x130 <shift+0xc>
 128:	85 b3       	in	r24, 0x15	; 21
 12a:	86 95       	lsr	r24
 12c:	85 bb       	out	0x15, r24	; 21
 12e:	03 c0       	rjmp	.+6      	; 0x136 <shift+0x12>
 130:	85 b3       	in	r24, 0x15	; 21
 132:	88 0f       	add	r24, r24
 134:	85 bb       	out	0x15, r24	; 21
 136:	af 9b       	sbis	0x15, 7	; 21
 138:	03 c0       	rjmp	.+6      	; 0x140 <shift+0x1c>
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	85 bb       	out	0x15, r24	; 21
 13e:	08 95       	ret
 140:	85 b3       	in	r24, 0x15	; 21
 142:	81 11       	cpse	r24, r1
 144:	02 c0       	rjmp	.+4      	; 0x14a <shift+0x26>
 146:	80 e8       	ldi	r24, 0x80	; 128
 148:	85 bb       	out	0x15, r24	; 21
 14a:	08 95       	ret

0000014c <__vector_2>:
 14c:	1f 92       	push	r1
 14e:	0f 92       	push	r0
 150:	0f b6       	in	r0, 0x3f	; 63
 152:	0f 92       	push	r0
 154:	11 24       	eor	r1, r1
 156:	0b b6       	in	r0, 0x3b	; 59
 158:	0f 92       	push	r0
 15a:	2f 93       	push	r18
 15c:	3f 93       	push	r19
 15e:	4f 93       	push	r20
 160:	5f 93       	push	r21
 162:	6f 93       	push	r22
 164:	7f 93       	push	r23
 166:	8f 93       	push	r24
 168:	9f 93       	push	r25
 16a:	af 93       	push	r26
 16c:	bf 93       	push	r27
 16e:	ef 93       	push	r30
 170:	ff 93       	push	r31
 172:	80 91 6e 01 	lds	r24, 0x016E
 176:	90 91 6f 01 	lds	r25, 0x016F
 17a:	00 97       	sbiw	r24, 0x00	; 0
 17c:	11 f4       	brne	.+4      	; 0x182 <__vector_2+0x36>
 17e:	95 98       	cbi	0x12, 5	; 18
 180:	05 c0       	rjmp	.+10     	; 0x18c <__vector_2+0x40>
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	19 f4       	brne	.+6      	; 0x18c <__vector_2+0x40>
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	cc df       	rcall	.-104    	; 0x124 <shift>
 18c:	ff 91       	pop	r31
 18e:	ef 91       	pop	r30
 190:	bf 91       	pop	r27
 192:	af 91       	pop	r26
 194:	9f 91       	pop	r25
 196:	8f 91       	pop	r24
 198:	7f 91       	pop	r23
 19a:	6f 91       	pop	r22
 19c:	5f 91       	pop	r21
 19e:	4f 91       	pop	r20
 1a0:	3f 91       	pop	r19
 1a2:	2f 91       	pop	r18
 1a4:	0f 90       	pop	r0
 1a6:	0b be       	out	0x3b, r0	; 59
 1a8:	0f 90       	pop	r0
 1aa:	0f be       	out	0x3f, r0	; 63
 1ac:	0f 90       	pop	r0
 1ae:	1f 90       	pop	r1
 1b0:	18 95       	reti

000001b2 <__vector_3>:
 1b2:	1f 92       	push	r1
 1b4:	0f 92       	push	r0
 1b6:	0f b6       	in	r0, 0x3f	; 63
 1b8:	0f 92       	push	r0
 1ba:	11 24       	eor	r1, r1
 1bc:	0b b6       	in	r0, 0x3b	; 59
 1be:	0f 92       	push	r0
 1c0:	2f 93       	push	r18
 1c2:	3f 93       	push	r19
 1c4:	4f 93       	push	r20
 1c6:	5f 93       	push	r21
 1c8:	6f 93       	push	r22
 1ca:	7f 93       	push	r23
 1cc:	8f 93       	push	r24
 1ce:	9f 93       	push	r25
 1d0:	af 93       	push	r26
 1d2:	bf 93       	push	r27
 1d4:	ef 93       	push	r30
 1d6:	ff 93       	push	r31
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	a3 df       	rcall	.-186    	; 0x124 <shift>
 1de:	ff 91       	pop	r31
 1e0:	ef 91       	pop	r30
 1e2:	bf 91       	pop	r27
 1e4:	af 91       	pop	r26
 1e6:	9f 91       	pop	r25
 1e8:	8f 91       	pop	r24
 1ea:	7f 91       	pop	r23
 1ec:	6f 91       	pop	r22
 1ee:	5f 91       	pop	r21
 1f0:	4f 91       	pop	r20
 1f2:	3f 91       	pop	r19
 1f4:	2f 91       	pop	r18
 1f6:	0f 90       	pop	r0
 1f8:	0b be       	out	0x3b, r0	; 59
 1fa:	0f 90       	pop	r0
 1fc:	0f be       	out	0x3f, r0	; 63
 1fe:	0f 90       	pop	r0
 200:	1f 90       	pop	r1
 202:	18 95       	reti

00000204 <opgave4>:
		PORTD = data[d];
}

void opgave4(void)
{
	DDRD = 0xFF;
 204:	8f ef       	ldi	r24, 0xFF	; 255
 206:	81 bb       	out	0x11, r24	; 17
	DDRC = 0x00;
 208:	14 ba       	out	0x14, r1	; 20

	while(1)
	{
		//Als een knop ingedrukt wordt, wordt de waarde daarvan de snelheid. Werkt niet met system interrupts, dus je moet de knop soms ingedrukt houden
		if(PINC != 0 )
 20a:	83 b3       	in	r24, 0x13	; 19
 20c:	88 23       	and	r24, r24
 20e:	31 f0       	breq	.+12     	; 0x21c <opgave4+0x18>
		{
			speed = PINC;
 210:	83 b3       	in	r24, 0x13	; 19
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	90 93 6a 01 	sts	0x016A, r25
 218:	80 93 69 01 	sts	0x0169, r24
		}

		//Schrijf de data van het huidige patroon naar PORTD
		PORTD = pattern[count].data;
 21c:	80 91 6c 01 	lds	r24, 0x016C
 220:	90 91 6d 01 	lds	r25, 0x016D
 224:	fc 01       	movw	r30, r24
 226:	ee 0f       	add	r30, r30
 228:	ff 1f       	adc	r31, r31
 22a:	8e 0f       	add	r24, r30
 22c:	9f 1f       	adc	r25, r31
 22e:	fc 01       	movw	r30, r24
 230:	e0 50       	subi	r30, 0x00	; 0
 232:	ff 4f       	sbci	r31, 0xFF	; 255
 234:	80 81       	ld	r24, Z
 236:	82 bb       	out	0x12, r24	; 18
		//Wacht het aantal milliseconde dat in het huidige patroon staat
		wait(pattern[count].delay * speed);
 238:	80 91 6c 01 	lds	r24, 0x016C
 23c:	90 91 6d 01 	lds	r25, 0x016D
 240:	fc 01       	movw	r30, r24
 242:	ee 0f       	add	r30, r30
 244:	ff 1f       	adc	r31, r31
 246:	8e 0f       	add	r24, r30
 248:	9f 1f       	adc	r25, r31
 24a:	fc 01       	movw	r30, r24
 24c:	e0 50       	subi	r30, 0x00	; 0
 24e:	ff 4f       	sbci	r31, 0xFF	; 255
 250:	20 91 69 01 	lds	r18, 0x0169
 254:	30 91 6a 01 	lds	r19, 0x016A
 258:	81 81       	ldd	r24, Z+1	; 0x01
 25a:	92 81       	ldd	r25, Z+2	; 0x02
 25c:	ac 01       	movw	r20, r24
 25e:	24 9f       	mul	r18, r20
 260:	c0 01       	movw	r24, r0
 262:	25 9f       	mul	r18, r21
 264:	90 0d       	add	r25, r0
 266:	34 9f       	mul	r19, r20
 268:	90 0d       	add	r25, r0
 26a:	11 24       	eor	r1, r1
 26c:	2d df       	rcall	.-422    	; 0xc8 <wait>

		count++; //patroon verder
 26e:	80 91 6c 01 	lds	r24, 0x016C
 272:	90 91 6d 01 	lds	r25, 0x016D
 276:	01 96       	adiw	r24, 0x01	; 1
 278:	90 93 6d 01 	sts	0x016D, r25
 27c:	80 93 6c 01 	sts	0x016C, r24

		//als alle patronen geweest zijn, opnieuw beginnen
		if(count >= NELEMS(pattern))
 280:	83 97       	sbiw	r24, 0x23	; 35
 282:	18 f2       	brcs	.-122    	; 0x20a <opgave4+0x6>
		{
			count = 0;
 284:	10 92 6d 01 	sts	0x016D, r1
 288:	10 92 6c 01 	sts	0x016C, r1
 28c:	be cf       	rjmp	.-132    	; 0x20a <opgave4+0x6>

0000028e <main>:
*******************************************************************/
{
	//powerpointOpg();
	//opgave2();
	//opgave3();
	opgave4();
 28e:	ba df       	rcall	.-140    	; 0x204 <opgave4>

00000290 <_exit>:
 290:	f8 94       	cli

00000292 <__stop_program>:
 292:	ff cf       	rjmp	.-2      	; 0x292 <__stop_program>
