
MIC-Week1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000022a  000002be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000022a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800102  00800102  000002c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000422  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001e3  00000000  00000000  000007be  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ce  00000000  00000000  000009a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ec  00000000  00000000  00000d70  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000022b  00000000  00000000  00000e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000163  00000000  00000000  00001087  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  000011ea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e2       	ldi	r30, 0x2A	; 42
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 30       	cpi	r26, 0x08	; 8
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	a2 d0       	rcall	.+324    	; 0x208 <main>
  c4:	b0 c0       	rjmp	.+352    	; 0x226 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <wait>:
	count++; //patroon verder

	//als alle patronen geweest zijn, opnieuw beginnen
	if(count >= NELEMS(pattern))
	{
		count = 0;
  c8:	18 16       	cp	r1, r24
  ca:	19 06       	cpc	r1, r25
  cc:	0c f5       	brge	.+66     	; 0x110 <wait+0x48>
  ce:	20 91 06 01 	lds	r18, 0x0106
  d2:	30 91 07 01 	lds	r19, 0x0107
  d6:	21 30       	cpi	r18, 0x01	; 1
  d8:	31 05       	cpc	r19, r1
  da:	51 f0       	breq	.+20     	; 0xf0 <wait+0x28>
  dc:	20 e0       	ldi	r18, 0x00	; 0
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	0c c0       	rjmp	.+24     	; 0xfa <wait+0x32>
  e2:	40 91 06 01 	lds	r20, 0x0106
  e6:	50 91 07 01 	lds	r21, 0x0107
  ea:	41 30       	cpi	r20, 0x01	; 1
  ec:	51 05       	cpc	r21, r1
  ee:	29 f4       	brne	.+10     	; 0xfa <wait+0x32>
  f0:	10 92 07 01 	sts	0x0107, r1
  f4:	10 92 06 01 	sts	0x0106, r1
  f8:	08 95       	ret
  fa:	ef ec       	ldi	r30, 0xCF	; 207
  fc:	f7 e0       	ldi	r31, 0x07	; 7
  fe:	31 97       	sbiw	r30, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <wait+0x36>
 102:	00 c0       	rjmp	.+0      	; 0x104 <wait+0x3c>
 104:	00 00       	nop
 106:	2f 5f       	subi	r18, 0xFF	; 255
 108:	3f 4f       	sbci	r19, 0xFF	; 255
 10a:	28 17       	cp	r18, r24
 10c:	39 07       	cpc	r19, r25
 10e:	49 f7       	brne	.-46     	; 0xe2 <wait+0x1a>
 110:	08 95       	ret

00000112 <__vector_16>:
 112:	1f 92       	push	r1
 114:	0f 92       	push	r0
 116:	0f b6       	in	r0, 0x3f	; 63
 118:	0f 92       	push	r0
 11a:	11 24       	eor	r1, r1
 11c:	2f 93       	push	r18
 11e:	8f 93       	push	r24
 120:	9f 93       	push	r25
 122:	98 9b       	sbis	0x13, 0	; 19
 124:	1a c0       	rjmp	.+52     	; 0x15a <__vector_16+0x48>
 126:	80 91 04 01 	lds	r24, 0x0104
 12a:	90 91 05 01 	lds	r25, 0x0105
 12e:	89 2b       	or	r24, r25
 130:	a1 f4       	brne	.+40     	; 0x15a <__vector_16+0x48>
 132:	80 91 00 01 	lds	r24, 0x0100
 136:	90 91 01 01 	lds	r25, 0x0101
 13a:	88 0f       	add	r24, r24
 13c:	99 1f       	adc	r25, r25
 13e:	90 93 01 01 	sts	0x0101, r25
 142:	80 93 00 01 	sts	0x0100, r24
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	90 93 07 01 	sts	0x0107, r25
 14e:	80 93 06 01 	sts	0x0106, r24
 152:	90 93 05 01 	sts	0x0105, r25
 156:	80 93 04 01 	sts	0x0104, r24
 15a:	99 9b       	sbis	0x13, 1	; 19
 15c:	1d c0       	rjmp	.+58     	; 0x198 <__vector_16+0x86>
 15e:	80 91 02 01 	lds	r24, 0x0102
 162:	90 91 03 01 	lds	r25, 0x0103
 166:	89 2b       	or	r24, r25
 168:	b9 f4       	brne	.+46     	; 0x198 <__vector_16+0x86>
 16a:	80 91 00 01 	lds	r24, 0x0100
 16e:	90 91 01 01 	lds	r25, 0x0101
 172:	99 23       	and	r25, r25
 174:	0c f4       	brge	.+2      	; 0x178 <__vector_16+0x66>
 176:	01 96       	adiw	r24, 0x01	; 1
 178:	95 95       	asr	r25
 17a:	87 95       	ror	r24
 17c:	90 93 01 01 	sts	0x0101, r25
 180:	80 93 00 01 	sts	0x0100, r24
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	90 93 07 01 	sts	0x0107, r25
 18c:	80 93 06 01 	sts	0x0106, r24
 190:	90 93 03 01 	sts	0x0103, r25
 194:	80 93 02 01 	sts	0x0102, r24
 198:	83 b3       	in	r24, 0x13	; 19
 19a:	81 11       	cpse	r24, r1
 19c:	08 c0       	rjmp	.+16     	; 0x1ae <__vector_16+0x9c>
 19e:	10 92 05 01 	sts	0x0105, r1
 1a2:	10 92 04 01 	sts	0x0104, r1
 1a6:	10 92 03 01 	sts	0x0103, r1
 1aa:	10 92 02 01 	sts	0x0102, r1
 1ae:	80 91 00 01 	lds	r24, 0x0100
 1b2:	90 91 01 01 	lds	r25, 0x0101
 1b6:	84 31       	cpi	r24, 0x14	; 20
 1b8:	91 05       	cpc	r25, r1
 1ba:	3c f4       	brge	.+14     	; 0x1ca <__vector_16+0xb8>
 1bc:	84 e1       	ldi	r24, 0x14	; 20
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	90 93 01 01 	sts	0x0101, r25
 1c4:	80 93 00 01 	sts	0x0100, r24
 1c8:	09 c0       	rjmp	.+18     	; 0x1dc <__vector_16+0xca>
 1ca:	81 3a       	cpi	r24, 0xA1	; 161
 1cc:	9f 40       	sbci	r25, 0x0F	; 15
 1ce:	34 f0       	brlt	.+12     	; 0x1dc <__vector_16+0xca>
 1d0:	80 ea       	ldi	r24, 0xA0	; 160
 1d2:	9f e0       	ldi	r25, 0x0F	; 15
 1d4:	90 93 01 01 	sts	0x0101, r25
 1d8:	80 93 00 01 	sts	0x0100, r24
 1dc:	9f 91       	pop	r25
 1de:	8f 91       	pop	r24
 1e0:	2f 91       	pop	r18
 1e2:	0f 90       	pop	r0
 1e4:	0f be       	out	0x3f, r0	; 63
 1e6:	0f 90       	pop	r0
 1e8:	1f 90       	pop	r1
 1ea:	18 95       	reti

000001ec <opgave6>:
	}
}

void opgave6(void)
{
	PORTD = 0b10000000;
 1ec:	80 e8       	ldi	r24, 0x80	; 128
 1ee:	82 bb       	out	0x12, r24	; 18
	wait( blink );
 1f0:	80 91 00 01 	lds	r24, 0x0100
 1f4:	90 91 01 01 	lds	r25, 0x0101
 1f8:	67 df       	rcall	.-306    	; 0xc8 <wait>
	PORTD = 0b00000000;
 1fa:	12 ba       	out	0x12, r1	; 18
	wait( blink );
 1fc:	80 91 00 01 	lds	r24, 0x0100
 200:	90 91 01 01 	lds	r25, 0x0101
 204:	61 cf       	rjmp	.-318    	; 0xc8 <wait>
 206:	08 95       	ret

00000208 <main>:
		}
}

int main(void)
{
	DDRC = 0b00000000; //input
 208:	14 ba       	out	0x14, r1	; 20
	DDRD = 0b11111111; //output
 20a:	8f ef       	ldi	r24, 0xFF	; 255
 20c:	81 bb       	out	0x11, r24	; 17

	 // Prescaler
	 TCCR0 |= (1 << CS01) | (1 << CS00);
 20e:	83 b7       	in	r24, 0x33	; 51
 210:	83 60       	ori	r24, 0x03	; 3
 212:	83 bf       	out	0x33, r24	; 51
	 //Het overflow event aanzetten
	 TIMSK|=(1<<TOIE0);
 214:	87 b7       	in	r24, 0x37	; 55
 216:	81 60       	ori	r24, 0x01	; 1
 218:	87 bf       	out	0x37, r24	; 55
	 //Counter op waarde 0 zetten
	 TCNT0=0;
 21a:	12 be       	out	0x32, r1	; 50

	//Luister naar System interrupts
	sei();
 21c:	78 94       	sei

	//Alleen voor opgave 4
	PORTD = 0x1;
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	82 bb       	out	0x12, r24	; 18
	{
		//opgave2();
		//opgave3();
		//opgave4();
		//opgave5();
		opgave6();
 222:	e4 df       	rcall	.-56     	; 0x1ec <opgave6>

		//charlieplexing();

		//extraopgave();
	}
 224:	fe cf       	rjmp	.-4      	; 0x222 <main+0x1a>

00000226 <_exit>:
 226:	f8 94       	cli

00000228 <__stop_program>:
 228:	ff cf       	rjmp	.-2      	; 0x228 <__stop_program>
